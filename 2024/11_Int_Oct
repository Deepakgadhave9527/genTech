### Set vs. Map
#Map

Definition: A Map is a built-in JavaScript object that stores key-value pairs. It allows you to associate each key with a specific value and provides efficient methods for adding, retrieving, and deleting key-value pairs. Keys in a Map must be unique, while values can be duplicated.

Set:

Definition: A Set is a built-in JavaScript object that allows you to store a collection of unique values. It ensures that no duplicate values are stored and provides methods for adding, checking, and removing values. Sets do not associate values with specific keys.

- **Set:**
  - **Definition:** A `Set` stores unique values, with no key-value pairs. It automatically removes duplicates.
  - **Stores:** Unique values only.
  - **Key-Value:** No key-value pairs.
  - **Uniqueness:** Ensures all values are unique.
  - **Methods:** `add(value)`, `delete(value)`, `has(value)`, `size`.

- **Map:**
  - **Definition:** A `Map` stores key-value pairs, where each key maps to a specific value. Keys must be unique, but values can be duplicated.
  - **Stores:** Key-value pairs.
  - **Key-Value:** Each key maps to a value.
  - **Uniqueness:** Keys must be unique; values can be duplicated.
  - **Methods:** `set(key, value)`, `get(key)`, `delete(key)`, `has(key)`, `size`.

========================================================================

- **Absolute Units:** 
Absolute length units are fixed and do not change relative to any other elements or the viewport. They are typically used when you need precise, static measurements.

Fixed measurements that don't change relative to other elements. 

Examples 
 
`px` (pixels), 
`pt` (points), 
`in` (inches).

- **Relative Units:** 

Relative length units are based on other dimensions, such as the dimensions of the viewport, the font size, or the parent element. These units are useful for creating flexible and responsive layouts.

Measurements based on other dimensions or the viewport. 


Examples 

 `%` (percentage of the parent element), 
`em` (relative to the font size of the element),
`rem` (relative to the root element's font size),
`vw` (viewport width), and `vh` (viewport height).


========================================================================
   
   `React.memo` is a utility that optimizes functional components by ensuring they only re-render when their props change.
   
    React.memo is a higher-order component in React that memoizes a component, meaning 
    it will only re-render if its props change.
     This is particularly useful for functional components to optimize performance by preventing unnecessary re-renders.

========================================================================
### calc()

- The `calc()` function in CSS provides a flexible way to perform dynamic calculations directly within your stylesheets.

- It allows you to combine different units (e.g., percentages, pixels) and perform mathematical operations.

- You can use it to adjust CSS property values dynamically.
- It is especially useful for creating responsive layouts and adjusting dimensions based on various factors.

========================================================================
### var()

var() function in CSS allows you to use the value of a custom property (variable) in your styles

:root {
  --main-color: #3498db;
  --padding: 20px;
}

.container {
  background-color: var(--main-color);
  padding: var(--padding);
}

Here are the benefits of using `var()` in CSS:

- **Reusability:** Define a value once and use it throughout your stylesheet.
- **Maintainability:** Update a value in one place, and the change is reflected everywhere it's used.
- **Consistency:** Ensure consistent styling by using the same variables for similar properties.
- **Flexibility:** Easily adjust values for different themes or designs by changing variable values.
- **Scoped Variables:** Variables can be defined at different levels (global or local) for fine-grained control over styling.


========================================================================

### Suspense

- Suspense is a feature in React that allows you to handle loading states for     asynchronous operations, 
- such as dynamically loading components or data. 
- It helps manage the user experience by showing fallback content while the main content is being loaded.
