
========================================================================
React Portals

- React Portals render children into a DOM node outside the parent component’s DOM hierarchy.
- Useful for modals, tooltips, and overlays that need to visually break out of their parent container.
- Ensures that elements are part of the React component tree.
- Allows elements to benefit from React’s event handling and lifecycle features.

========================================================================

React Fiber 

React Fiber is the new reconciliation algorithm in React 16 and later versions. 
It enhances the ability to update the user interface and manage component rendering more efficiently

- React Fiber is the new reconciliation engine in React 16 and later.
- It improves rendering performance and user experience.
- Breaks rendering work into units and spreads it out over multiple frames.
- Allows smoother animations and better handling of complex updates.
- Introduces features like error boundaries and async rendering.
- Enhances flexibility and robustness of React applications.


========================================================================

### Suspense

- Suspense is a feature in React that allows you to handle loading states for     asynchronous operations, 
- such as dynamically loading components or data. 
- It helps manage the user experience by showing fallback content while the main content is being loaded.


========================================================================


The return this.firstName inside the constructor function will not work as intended 
because constructor functions implicitly return the newly created object unless you explicitly return an object.
 Returning a primitive value will override the object creation.

### returning an Object:
If you explicitly return an object from a constructor function, this returned object will replace the default instance that the constructor creates.

function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
  this.nationality = "English";

  // Returning a primitive value (string)
  return this.firstName;
}

const myFather = new Person("John", "Doe", 50, "blue");
console.log(myFather); // Outputs: Person { firstName: 'John', lastName: 'Doe', age: 50, eyeColor: 'blue', nationality: 'English' }


### Returning a Primitive Value:
If you explicitly return a primitive value (like a string, number, boolean, etc.), 
this value is ignored, and the newly created instance is returned instead.


function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
  this.nationality = "English";

  // Returning a new object
  return { custom: 'object' };
}

const myFather = new Person("John", "Doe", 50, "blue");
console.log(myFather); // Outputs: { custom: 'object' }
javascript

========================================================================

In React.js development, the `window` object is often used for tasks related to application behavior and user interactions. Here are some `window` methods commonly used in React applications:

1. **`window.addEventListener()`**: Registers event listeners for various events (e.g., resize, scroll) to handle changes or interactions in the application.

2. **`window.removeEventListener()`**: Removes event listeners that were previously added, helping to clean up resources and avoid memory leaks.

3. **`window.scrollTo()`**: Used to programmatically scroll the window to a specific position, useful for smooth scrolling or navigation effects.

4. **`window.location.href`**: Gets or sets the URL of the current page, often used for programmatic navigation or redirecting.

5. **`window.localStorage`**: Provides access to local storage for storing and retrieving data on the client side.

6. **`window.sessionStorage`**: Provides access to session storage for storing data for the duration of the page session.

7. **`window.matchMedia()`**: Allows for querying and responding to media queries, useful for responsive design and handling different screen sizes.

8. **`window.requestAnimationFrame()`**: Schedules a function to be called before the next repaint, useful for implementing animations or optimizing performance.

9. **`window.history.pushState()`**: Updates the browser history stack without reloading the page, often used in single-page applications (SPAs) for managing navigation.

10. **`window.scrollY`**: Gets the number of pixels that the document is currently scrolled vertically, useful for tracking scroll position or implementing infinite scrolling.

These methods help manage application state, handle user interactions, and optimize performance in React.js applications.
