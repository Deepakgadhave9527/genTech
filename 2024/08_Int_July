
================================ memoization====================================================

 What is memoization in JavaScript?


- **Memoization in JavaScript optimization technique used to:
  - Improve the performance of functions.
  - by Cache/storing the results of expensive function calls.
  - Return the cached result when the same inputs occur again.
  
- **Benefits:**
  - Avoids redundant calculations.
  - Speeds up the program.
  
- **Use case:**  
  - Particularly useful for functions with repetitive or computationally expensive tasks.




 '
Memoization in JavaScript is an optimization technique used to improve the performance of functions by caching the results of expensive function calls and returning the cached result when the same inputs occur again. This avoids redundant calculations and speeds up the program. It is particularly useful for functions with repetitive or computationally expensive tasks.


Memoization in JavaScript is an optimization technique used to improve the performance of functions by caching the results of expensive functions calls and returning the cached result when the same inputs occur again


 Memoization in JavaScript is an optimization technique that stores the results of functions calls and reuses them when the same inputs occur again. This avoids redundant calculations, improving the performance of the program.



Memoization is an optimization technique used primarily to speed up computer programs
by storing the results of expensive functions calls
and returning the cached result when the same inputs occur again.

It is particularly useful for functions with expensive or repetitive computations.





=================== Immediately Invoked Function Expression (IIFE)=======================

Immediately Invoked Function Expression (IIFE)

- An IIFE is a function that is executed immediately after it is defined.

- It is often used to create a local scope to avoid polluting the global scope.

- Runs code immediately after declaration, useful for initialization tasks, configuring settings, or starting applications at the desired moment.


(function() {
console.log("This function runs immediately!");
})();

(function(name) {
console.log("Hello, " + name + "!");
})("World");



Encapsulation: Creates private scopes for variables and functions, preventing conflicts and unintended modifications in the global scope.

Avoiding Global Pollution: Keeps the global namespace clean, minimizing naming clashes with other scripts or libraries and maintaining modular, self-contained code.


Data Privacy: Utilizes closures to maintain data privacy, hiding internal variables and functions while exposing only necessary parts, fundamental to the Module Pattern.


==========================================

### Axios

- Popular Promise-based HTTP client for making AJAX requests in the browser and Node.js.
- Interceptors for request and response handling.
- Automatic transformation of JSON data.
- Support for browser and Node.js environments.
- Ability to cancel requests.
- CSRF protection by default.
- Error handling with meaningful error messages.
- Interceptors provide global request/response handling.

### Fetch

- Modern API for making network requests in the browser, built into modern browsers (ES6 feature).
- Promise-based API.
- Streamlined API surface compared to XMLHttpRequest (XHR).
- No third-party dependencies.
- Support for streaming responses.

### Use Axios If:

- You need built-in support for interceptors, request cancellation, or automatic JSON parsing.
- Cross-browser compatibility is important, including older browsers.
- You prefer simplified error handling and configuration.

### Use Fetch If:

- You want to avoid additional dependencies and rely on native browser APIs.
- Performance and bundle size are critical, especially in modern environments.
- You are comfortable handling request/response interception and additional error handling manually.

This format highlights the specific reasons and scenarios where Axios or Fetch would be preferred based on their capabilities and characteristics.


==============================================
Patch vs Put

- **PUT**

  - The PUT method is used to update an entire resource.
  - If the resource exists, it will be completely replaced with the new data provided.
  - PUT replaces the entire resource.
  - If your form or component allows the user to update an entire resource (e.g., editing all fields of a user profile), you might use PUT.

- **PATCH**
  - The PATCH method is used to apply partial updates to a resource.
  - This means you only send the fields you want to update, and the rest of the resource remains unchanged.
  - PATCH updates only the specified fields.
  - If your form or component allows the user to update only specific fields (e.g., changing the user's email address or password), you might use PATCH.

===========================================================================

-A lexical scope in JavaScript means that a variable defined outside a function can be accessible inside another function

### Function Scope:
Each function in JavaScript creates a new scope. Variables defined within a function are not accessible outside of it.

### Block Scope:
Variables declared with let and const are block-scoped, meaning they are only accessible within the nearest set of curly braces {} in which they are defined.

### Nested Scopes:
Inner functions have access to variables and functions in their outer scopes. This nesting can continue indefinitely, allowing inner functions to access variables from all outer scopes up to the global scope.

function outerFunction() {
  var outerVar = 'I am outside!';

  function innerFunction() {
    var innerVar = 'I am inside!';
    console.log(outerVar); // Accessible
    console.log(innerVar); // Accessible
  }

  innerFunction();
  console.log(outerVar); // Accessible
  // console.log(innerVar); // Uncaught ReferenceError: innerVar is not defined
}

outerFunction();





========================================================================


## Scope Chain vs. Context in JavaScript

### Scope Chain
- **Definition**: The order in which the JavaScript engine looks for variables, starting from the innermost scope and moving outward until it finds the variable or reaches the global scope.
- **Example**:
  ```javascript
  function outer() {
      let outerVar = 'I am outer';
      function inner() {
          console.log(outerVar); // 'I am outer'
      }
      inner();
  }
  outer();
  ```

### Context
- **Definition**: Refers to the value of `this` within a function and is determined by how the function is called.
- **Example**:
  ```javascript
  const obj = {
      value: 42,
      getValue: function() {
          return this.value;
      }
  };
  console.log(obj.getValue()); // 42
  ```



- **`while` Loop**: Checks the condition before executing the code block. If the condition is false initially, the code block inside the loop will not execute at all.

  **Syntax:**
  ```javascript
  while (condition) {
    // Code to execute
  }
  ```

  **Example:**
  ```javascript
  let count = 1;

  while (count > 5) {
    console.log(count);
    count++;
  }

  - **`while` Loop**:
  - Condition is checked before the loop executes.
  - If the condition is false initially, the code block may not execute at all.
  
===========================================================================

In JavaScript, a do...while loop is used to execute a block of code at least once before checking a condition, and then it repeatedly executes the block as long as the condition remains true.

do {
  // Block of code to be executed
} while (condition);



  **Syntax:**
  ```javascript
  do {
    // Code to execute
  } while (condition);
  ```

  **Example:**
  ```javascript
  let count = 1;

  do {
    console.log(count);
    count++;
  } while (count > 5);



- **`do...while` Loop**:
  - Code block is executed before the condition is checked.
  - Guarantees at least one execution of the code block.

  
  ### ===========================================================================

### 2. **When to Use**

- **`while` Loop**: Use this when you want to run a block of code as long as a condition is true, and you don’t necessarily need to execute the code block if the condition is initially false.


- **`do...while` Loop**: Use this when you need to execute the code block at least once regardless of the condition. This is useful when the code block needs to run before any condition is evaluated.


### 3. **Execution Example**

Here’s a practical example showing the difference:

**while` Loop Example:**
```javascript
let num = 0;

while (num > 0) {
  console.log("This won't run because num is 0");
  num--;
}
```

**`do...while` Loop Example:**
```javascript
let num = 0;

do {
  console.log("This will run once, even though num is 0");
  num--;
} while (num > 0);
```
===========================================================================



