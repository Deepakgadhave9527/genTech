
================================ memoization====================================================

 What is memoization in JavaScript?


- **Memoization in JavaScript optimization technique used to:
  - Improve the performance of functions.
  - by Cache/storing the results of expensive function calls.
  - Return the cached result when the same inputs occur again.
  
- **Benefits:**
  - Avoids redundant calculations.
  - Speeds up the program.
  
- **Use case:**  
  - Particularly useful for functions with repetitive or computationally expensive tasks.




 '
Memoization in JavaScript is an optimization technique used to improve the performance of functions by caching the results of expensive function calls and returning the cached result when the same inputs occur again. This avoids redundant calculations and speeds up the program. It is particularly useful for functions with repetitive or computationally expensive tasks.


Memoization in JavaScript is an optimization technique used to improve the performance of functions by caching the results of expensive functions calls and returning the cached result when the same inputs occur again


 Memoization in JavaScript is an optimization technique that stores the results of functions calls and reuses them when the same inputs occur again. This avoids redundant calculations, improving the performance of the program.



Memoization is an optimization technique used primarily to speed up computer programs
by storing the results of expensive functions calls
and returning the cached result when the same inputs occur again.

It is particularly useful for functions with expensive or repetitive computations.





=================== Immediately Invoked Function Expression (IIFE)=======================

Immediately Invoked Function Expression (IIFE)

- An IIFE is a function that is executed immediately after it is defined.

- It is often used to create a local scope to avoid polluting the global scope.

- Runs code immediately after declaration, useful for initialization tasks, configuring settings, or starting applications at the desired moment.


(function() {
console.log("This function runs immediately!");
})();

(function(name) {
console.log("Hello, " + name + "!");
})("World");



Encapsulation: Creates private scopes for variables and functions, preventing conflicts and unintended modifications in the global scope.

Avoiding Global Pollution: Keeps the global namespace clean, minimizing naming clashes with other scripts or libraries and maintaining modular, self-contained code.


Data Privacy: Utilizes closures to maintain data privacy, hiding internal variables and functions while exposing only necessary parts, fundamental to the Module Pattern.


================= PropTypes=========================

What are PropTypes?
PropTypes is a type-checking library included with React.
It allows you to specify the expected types for props that a component should receive, providing runtime type validation.

npm install prop-types

==================== ref ======================

In React, a ref (short for reference) is an object that allows you to directly access and interact with a DOM element


==========================================

whats forwardref react

forwardRef in React is a utility that allows you to pass a ref from a parent component to a child component.
This is useful when you want to access a DOM element

When to Use Refs
Accessing DOM Elements: When you need to directly interact with a DOM element.
Managing Focus: To control focus on inputs or buttons.
Animations: For triggering animations in response to user interactions.
Third-Party Libraries: When integrating with libraries that manipulate the DOM directly.

import React, { useRef, forwardRef } from 'react';

// Child component using forwardRef
const CustomInput = forwardRef((props, ref) => {
return <input ref={ref} type="text" {...props} />;
});

// Parent component
const App = () => {
const inputRef = useRef(null);

const focusInput = () => {
if (inputRef.current) {
inputRef.current.focus(); // Focus the input element
}
};

return (
<div>
<CustomInput ref={inputRef} placeholder="Type something..." />
<button onClick={focusInput}>Focus Input</button>
</div>
);
};

export default App;

==========================================

### Axios

- Popular Promise-based HTTP client for making AJAX requests in the browser and Node.js.
- Interceptors for request and response handling.
- Automatic transformation of JSON data.
- Support for browser and Node.js environments.
- Ability to cancel requests.
- CSRF protection by default.
- Error handling with meaningful error messages.
- Interceptors provide global request/response handling.

### Fetch

- Modern API for making network requests in the browser, built into modern browsers (ES6 feature).
- Promise-based API.
- Streamlined API surface compared to XMLHttpRequest (XHR).
- No third-party dependencies.
- Support for streaming responses.

### Use Axios If:

- You need built-in support for interceptors, request cancellation, or automatic JSON parsing.
- Cross-browser compatibility is important, including older browsers.
- You prefer simplified error handling and configuration.

### Use Fetch If:

- You want to avoid additional dependencies and rely on native browser APIs.
- Performance and bundle size are critical, especially in modern environments.
- You are comfortable handling request/response interception and additional error handling manually.

This format highlights the specific reasons and scenarios where Axios or Fetch would be preferred based on their capabilities and characteristics.


==============================================
Patch vs Put

- **PUT**

  - The PUT method is used to update an entire resource.
  - If the resource exists, it will be completely replaced with the new data provided.
  - PUT replaces the entire resource.
  - If your form or component allows the user to update an entire resource (e.g., editing all fields of a user profile), you might use PUT.

- **PATCH**
  - The PATCH method is used to apply partial updates to a resource.
  - This means you only send the fields you want to update, and the rest of the resource remains unchanged.
  - PATCH updates only the specified fields.
  - If your form or component allows the user to update only specific fields (e.g., changing the user's email address or password), you might use PATCH.

===========================================================================

-A lexical scope in JavaScript means that a variable defined outside a function can be accessible inside another function

### Function Scope:
Each function in JavaScript creates a new scope. Variables defined within a function are not accessible outside of it.

### Block Scope:
Variables declared with let and const are block-scoped, meaning they are only accessible within the nearest set of curly braces {} in which they are defined.

### Nested Scopes:
Inner functions have access to variables and functions in their outer scopes. This nesting can continue indefinitely, allowing inner functions to access variables from all outer scopes up to the global scope.

function outerFunction() {
  var outerVar = 'I am outside!';

  function innerFunction() {
    var innerVar = 'I am inside!';
    console.log(outerVar); // Accessible
    console.log(innerVar); // Accessible
  }

  innerFunction();
  console.log(outerVar); // Accessible
  // console.log(innerVar); // Uncaught ReferenceError: innerVar is not defined
}

outerFunction();

