
==========================================================================

CSS preprocessor

 CSS preprocessor is a tool that converts code written in its scripting language into standard CSS. This conversion makes CSS more powerful by providing features like:

- **Variables**
- **Nesting**
- **Mixins**
- **Functions**"

   These features help the development process, 
      reduce repetition,
     - Enhanced capabilities like **loops**, **functions**, and **conditionals**.
     - **Cleaner**, more modular code.
     - **Reusability** of code (via variables, mixins, etc.).
    - Improved **maintainability** and **organization** of styles.
    and make the CSS codebase easier to manage.



  -Variables :to store values (like colors, fonts, etc.) and reuse them throughout your stylesheet.
      - Example: `$primary-color: #3498db;`

  - Nesting :Lets you nest CSS selectors in a hierarchical structure, making the code more readable and maintainable.

  - Example:
      ```scss
      nav { ul { list-style-type: none; } }
      ```
  
  - Mixins :Reusable chunks of code that you can insert wherever needed, often with the ability to pass arguments to customize them.

    - Example:
      ```scss
      @mixin border-radius($radius) { border-radius: $radius; }
      .box { @include border-radius(10px); }
      ```

  - Functions :Let you define reusable logic (like mathematical operations) within your stylesheets

  - **Partials and Import**: Split CSS into smaller files and import them for better organization.
  - **Inheritance (Extends)**: Share styles between selectors to reduce redundancy.
    - Example: `.button { @extend .btn; }`

 
  

- **Popular CSS Preprocessors**:
  - **Sass** (with `.scss` and `.sass` syntax)
  - **LESS**
  - **Stylus**




================================================================================================================================================================
### Media Queries in CSS

A media query is a CSS technique used to apply styles to a web page based on specific characteristics of the device or browser viewing the page.
With media queries, you can conditionally apply CSS rules based on factors like screen size, device orientation, resolution, and more.
"With media queries, we can create responsive designs that for different devices and screen sizes."




- A media query is a CSS technique used to apply styles to a web page based on specific characteristics of the device or browser viewing the page.

- Media queries allow you to apply CSS rules conditionally based on factors like screen size, device orientation, resolution, and more.

- With media queries, we can create responsive designs that adjust the layout and styling of a webpage for different devices, screen sizes, resolutions, and orientations.

- Media queries ensure that websites are user-friendly and optimized across a wide range of devices, from mobile phones to large desktop monitors.

- They are essential for building adaptive, flexible, and accessible web pages. 



The `@media` rule is used in media queries to apply different styles for different media types/devices.

#### Examples:

- Extra small devices (phones, 600px and down):

@media only screen and (max-width: 600px) {...}


- Small devices (portrait tablets and large phones, 600px and up):

@media only screen and (min-width: 600px) {...}


- Medium devices (landscape tablets, 768px and up):

@media only screen and (min-width: 768px) {...}


- Large devices (laptops/desktops, 992px and up):

@media only screen and (min-width: 992px) {...}


- Extra large devices (large laptops and desktops, 1200px and up):

@media only screen and (min-width: 1200px) {...}


#### Breakpoints:

- Mobile (extra small device) xs: size <= 575.98px
- Tablet (small device) sm: size >= 576px && size <= 767.98px
- Laptop (medium device) md: size >= 768px && size <= 991.98px
- Desktop (large device) lg: size >= 991.98px && size <= 1199.98px
- Big screen (extra large device) xl: size >= 1200px

### Media Types:
Media types specify the target device or output medium. Some common media types include:

- all
- braille
- handheld
- print
- screen
- speech
- tty
- TV


==================================================================================



Cross-browser compatibility ensures that web applications work consistently across different browsers and versions, providing a uniform user experience. 

- **CSS Prefixes**: Use vendor prefixes (e.g., `-webkit-`, `-moz-`, `-ms-`, `-o-`) for CSS properties that require them to ensure compatibility with various browser engines.



========================================================================

The `<!DOCTYPE>` declaration specifies the HTML version being used and ensures the browser renders the page in standards mode. For HTML5, it is `<!DOCTYPE html>`.

which does not correspond to a specific HTML version

Without `<!DOCTYPE>`, the browser might:

- Render in quirks mode, causing inconsistent layout.
- Use outdated or inconsistent styling rules.
- Lead to cross-browser compatibility issues.


Quirks mode is a browser rendering mode that emulates older, 
non-standard behavior to maintain compatibility with legacy websites, 
leading to inconsistent layouts and styling.


========================================================================

- **Absolute Units:** 
Absolute length units are fixed and do not change relative to any other elements or the viewport. They are typically used when you need precise, static measurements.

Fixed measurements that don't change relative to other elements. 

Examples 
 
`px` (pixels), 
`pt` (points), 
`in` (inches).

- **Relative Units:** 

Relative length units are based on other dimensions, such as the dimensions of the viewport, the font size, or the parent element. These units are useful for creating flexible and responsive layouts.

Measurements based on other dimensions or the viewport. 


Examples 

 `%` (percentage of the parent element), 
`em` (relative to the font size of the element),
`rem` (relative to the root element's font size),
`vw` (viewport width), and `vh` (viewport height).



========================================================================
### calc()

- The `calc()` function in CSS provides a flexible way to perform dynamic calculations directly within your stylesheets.

- It allows you to combine different units (e.g., percentages, pixels) and perform mathematical operations.

- You can use it to adjust CSS property values dynamically.
- It is especially useful for creating responsive layouts and adjusting dimensions based on various factors.

========================================================================
### var()

var() function in CSS allows you to use the value of a custom property (variable) in your styles

:root {
  --main-color: #3498db;
  --padding: 20px;
}

.container {
  background-color: var(--main-color);
  padding: var(--padding);
}

Here are the benefits of using `var()` in CSS:

- **Reusability:** Define a value once and use it throughout your stylesheet.
- **Maintainability:** Update a value in one place, and the change is reflected everywhere it's used.
- **Consistency:** Ensure consistent styling by using the same variables for similar properties.
- **Flexibility:** Easily adjust values for different themes or designs by changing variable values.
- **Scoped Variables:** Variables can be defined at different levels (global or local) for fine-grained control over styling.


========================================================
classList

with help of classList JavaScript allows us to add, remove, replace, toggle or check whether the specified CSS class,s is present or not


add()	Adds one or more tokens to the list
contains()	Returns true if the list contains a class,s
remove()	Removes one or more tokens from the list
toggle()	Toggles between tokens in the list
replace()	Replaces a token in the list


    <style>
        .highlight {
            color: red;
        }
        .bold {
            font-weight: bold;
        }
    </style>
<body>
    <p id="text">Hello World</p>
    
    <button onclick="addClass()">Add Highlight</button>
    <button onclick="checkClass()">Check Highlight</button>
    <button onclick="removeClass()">Remove Highlight</button>
    <button onclick="toggleClass()">Toggle Highlight</button>
    <button onclick="replaceClass()">Replace Highlight with Bold</button>

    <script>
        function addClass() {
            document.getElementById('text').classList.add('highlight');
        }

        function checkClass() {
            const hasClass = document.getElementById('text').classList.contains('highlight');
            alert(hasClass ? 'Element has the highlight class!' : 'Element does not have the highlight class.');
        }

        function removeClass() {
            document.getElementById('text').classList.remove('highlight');
        }

        function toggleClass() {
            document.getElementById('text').classList.toggle('highlight');
        }

        function replaceClass() {
            document.getElementById('text').classList.replace('highlight', 'bold');
        }
    </script>
</body>
</html>




================================ Semantic elements ====================================



Semantic elements are HTML elements that clearly describe their meaning in a way that both browsers and developers can understand. 

Using semantic elements improves SEO, accessibility, and code clarity by making the structure of your webpage more meaningful.

Common Semantic Elements:

<article>
<aside>
<details>
<figcaption>
<figure>
<footer>
<header>
<main>
<mark>
<nav>
<section>
<summary>
<time>

```javascript
// A semantic element clearly describes its meaning to both the browser and the developer.
// Semantic elements in HTÃŸML provide meaning to the web content they enclose,
// helping both browsers and developers understand the structure and purpose of the content.
// They improve accessibility, SEO, and maintainability of web pages.
// Meaningful Structure: Conveys the role of the content.
// Improved Accessibility: Aids assistive technologies in navigating content.
// SEO Benefits: Helps search engines better index and rank pages.
===============================================================================



1.  ##Pseudo-classes (:) ##:
   - Primarily used to style elements under various states.
   When referring to state, this includes the condition or user interaction,

   - Common pseudo-classes include `:hover`, `:active`, `:focus`, and `:disabled`.
   - Denoted by a single colon (:).
   - States generally involve user interaction.

   <style>
  a:hover {
    color: red;
  }
</style>

<a href="#">Hover over me</a>


2.  ##Pseudo-Elements (::) ##:
   - Used to style specified parts of an element.
   - Denoted by a double colon (::).
   - Common pseudo-elements include
    `::before`, `::after`, `::first-letter`, and `::first-line`.

   - Can target the first letter or first line of text within an element, among other things.
   - Can be used to insert content before or after the element.

   <style>

    p::before {
      content: "Before "
    }

    p::after {
      content: " After";
      font-style: italic;
    }
  

</style>
  <p>This is a paragraph.</p>



===============================================================================

What is the box model in CSS?

-The CSS box model is a fundamental concept 
that describes the layout and design of elements on a web page.
-The CSS box model is a way to understand how elements are structured on a web page.
-It consists of four main components: content, padding, border, and margin. 
- Content is what's inside the element,
 -padding is space around the content, 
 -border is a line around the padding, 
 -and margin is space outside the border. 



================================================================================


Flexbox:

One-dimensional layout model.
Best for arranging items in a row or a column.
Suited for smaller-scale layouts.
Controls alignment and distribution along a single axis.
Uses properties like display: flex, flex-direction, justify-content, and align-items.



CSS Grid:

Two-dimensional layout system.
Organizes content in rows and columns.
Ideal for larger-scale layouts.
Provides precise control over layout and placement of items
Utilizes properties like display: grid, grid-template-rows, and grid-template-columns.




================================================================================


Sure, let's compare Flexbox and CSS Grid across various aspects:

1.  ##Layout Model ##:
   - Flexbox: One-dimensional layout model.
   - CSS Grid: Two-dimensional layout system.

2.  ##Axis Control ##:
   - Flexbox: Controls layout along a single axis (either horizontally or vertically).
   - CSS Grid: Organizes content in rows and columns simultaneously.

3.  ##Suitability ##:
   - Flexbox: Best for smaller-scale layouts and components.
   - CSS Grid: Ideal for larger-scale layouts that are not linear in design.


7.  ##Usage ##:
- Flexbox: Commonly used for navigation menus, card layouts, and aligning content within containers.
- CSS Grid: Frequently used for complex page layouts, responsive grids, and magazine-style layouts.


4.  ##Alignment and Distribution ##:
   - Flexbox: Offers fine-tuning of alignment and space distribution between items.
   - CSS Grid: Provides precise control over layout and placement of items.

5.  ##Flexibility ##:
   - Flexbox: Works well for layouts with dynamic content and varying screen sizes.
   - CSS Grid: Offers flexibility with flexible widths and two-dimensional layout capabilities.

6.  ##Item Management ##:
   - Flexbox: Uses a parent-child relationship (Flex Container and Flex Item) to adjust item dimensions.
   - CSS Grid: Supports both implicit and explicit content placement, with built-in automation for extending line items.

In summary, Flexbox is well-suited for simpler layouts and alignment tasks, while CSS Grid excels in creating complex layouts with precise control over rows and columns. Both layout models have their strengths and are often used together to create highly customized and responsive web designs.










================================================================================

display none and visibility hidden

- **`visibility: hidden;`:**
           Hides the element while still occupying space in the layout.
             It's not visible, but it still affects the document flow.
- **`display: none;`:** 
         Completely removes the element from the layout, including its space. 
I         It's not rendered and doesn't affect the document flow.




================================================================================




position property is used to set the position of any element
By default all the elements are positioned to left to right


The position property has differnt values like
static (default)
relative
absolute
fixed
sticky

-  ##Static ##: 
  - Default position for all elements.
  - Not affected by the `top`, `right`, `bottom`, and `left` properties.
  - Positioned according to the normal flow of the page.


-  ##Relative ##: 
     its default/static position
   - Holds its space in the layout.
  - measurement of the length (top, right, bottom, left) starts from default/static position.


-  ##Absolute ##: 

  - measurement of the length(top, right, bottom, left) starts
  from relative positioned parent, but if there is no relative
  parent then measurement will start from body
  - It will not hold the initial space.
    - Useful for creating overlays, dropdown menus, and tooltips.




-  ##Fixed ##: 
  - Positioned relative to the viewport.
  - Does not hold space in the layout.
  - Does not move with the page scroll.
  - Remains fixed in its position regardless of scrolling.
  - Commonly used for elements like navigation bars or headers that should remain visible at all times.

  - measurement starts from body
  - it does not hold the space
  - it does not move on scroll


-  ##Sticky ##: 
  - Initially positioned relative to the viewport, but switches to fixed positioning when it reaches a specified scroll position.
  - Holds space in the layout.
  - Moves within the viewport until the specified scroll position is reached, then becomes fixed.
  - Useful for creating elements like sticky headers or sidebars that stick to the top or side of the viewport when scrolling.


  - measurement starts from body
  - it holds the space
  - it moves only within the viewport




================================================================================


##Block Elements:
- Start on a new row.
- Take up the full width .
- Width and height can be set.
- Examples: `<div>`, `<p>`, `<li>`, etc.

 ##Inline Elements:
- Don't start on a new line.
- Display on the same line if there is enough space available.
- Width and height cannot be set.
- Margins and padding apply horizontally.
- Examples: `<span>`, `<a>`, `<strong>`, `<img>`, `<input>`.

 ##Inline-Block Elements:
  Provide a hybrid behavior between block and inline elements.
- Can start on a new line if forced.
- Width, height, margins, and padding can be set.
- Examples: `<div>`, `<p>`, `<li>`, `<img>` (when you want it to behave as a block).

Inline-block elements behave like:

- **Inline elements**: They sit next to each other horizontally.
- **Block elements**: They respect width and height properties and can have margins and padding.







================================================================================

specificity


CSS specificity is decides which style rules apply to an element 
when there are conflicting styles.

It determines which style wins out of multiple competing rules.



Universal Selector: 0
Element selectors and pseudo-elements: 1
Class selectors, attribute selectors, and pseudo-classes: 10
ID selectors: 100
Inline styles: 1000\
!import



Specificity in CSS refers to the set of rules that determine 
which style rule gets applied to an element 
when multiple conflicting rules exist




================================================================================

CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator.

There are four different combinators in CSS:

descendant selector (space)
child selector (>)
adjacent sibling selector (+)
general sibling selector (~)




------------------------------------------------------------------------------------------------

### Cascading (in CSS)

Cascading in CSS determines which styles are applied based on:

1. Source Order: Later styles override earlier ones.
2. Specificity: More specific selectors take precedence.
3. Importance: `!important` rules override others.
4. Inheritance: Some properties inherit values from parent elements.

### Example

css
p { color: blue; }           /* General */
.highlight p { color: red; } /* More specific */
p { color: green !important; } /* Highest priority */


### Summary
- Cascading: The method of applying CSS rules based on order, specificity, importance, and inheritance.


------------------------------------------------------------------------------------------------

##Session Storage:
- Data stored in session storage is scoped to the current browsing session.
- It is only available within the same tab or window that created it.
- Data is lost when the tab or window is closed or the session ends.
- Each browsing session maintains its own separate session storage.
- Data stored in one session will not be accessible in another session, even if it's on the same website.


1. Storing Data:

sessionStorage.setItem('key', 'value');

2. Retrieving Data:

var value = sessionStorage.getItem('key');

3. Removing an Item:

sessionStorage.removeItem('key');

4. Clearing All Data:

sessionStorage.clear();


##Local Storage:

- Data stored in local storage is scoped to the same origin (protocol, domain, and port).
- It is accessible across multiple tabs and windows of the same origin.
- Data available even after the browser is closed and reopened.
- Each origin maintains its own separate local storage.
- Data stored in local storage will be available across different sessions, allowing for continuity of user preferences and application state.

Here's how you can use JavaScript to store, retrieve, and clear data from both Session Storage and Local Storage, along with methods for removing individual items and clearing all stored data:



1. Storing Data:

localStorage.setItem('key', 'value');

2. Retrieving Data:

var value = localStorage.getItem('key');

3. Removing an Item:

localStorage.removeItem('key');

4. Clearing All Data:

localStorage.clear();





==============================================

### Elements


- Elements are the simplest building blocks of React applications.
- They describe what you want to see on the screen.
- They are used to define what the UI should look like.
- React elements are objects that describe a DOM node or part of the UI, not actual DOM nodes. They are descriptions of UI elements.
- Elements can contain:
  - Content: The actual data or text to be displayed.
  - Semantic meaning: Tags like `<header>`, `<footer>`, `<article>`, etc., provide structure and meaning to the UI.
  - Formatting instructions: Through attributes like `className` (CSS classes) or `style` (inline styles), React elements can specify how the content should be styled.
- React elements are immutable and lightweight objects that represent the structure of the UI.
- React uses these elements to create and update the DOM.



### Components

- Used to define the logic and structure of the UI, which can include multiple elements and other components.
- A function or class that can manage its own state and lifecycle.
- Components are more complex structures that define both the logic and structure of the UI, and they can include multiple elements and other components.
- A reusable and encapsulated piece of the UI, which can manage its own logic and state.

==============================================

### Tags

- Tags are the syntax used to create elements.
- A tag is a part of HTML syntax used to create an element.
- Tags can be opening, closing, or self-closing.

<div> <!-- Opening tag -->
</div> <!-- Closing tag -->

### Elements

- Elements are the structures that define the document's content and structure.
- An element consists of an opening tag, content (optional), and a closing tag.

<div> <!-- Opening tag -->
  This is a div element. <!-- Content -->
</div> <!-- Closing tag -->



========================================================================




Certainly! Hereâ€™s a list of HTML5 features with just the titles:

1. Semantic Elements
2. Forms Enhancements
3. Canvas
4. Video and Audio
5. Offline Capabilities
6. Geolocation
7. Web Storage
8. Web Workers
9. SVG and MathML
10. Microdata
11. Drag and Drop API
12. WebSocket API
13. Server-Sent Events (SSE)
14. Viewport Meta Tag
15. Web Animation API
16. Custom Data Attributes
17. WebRTC
18. Form Validation
19. Shadow DOM
20. History API
21. Intersection Observer API
22. IndexedDB



1. **Semantic Elements**: 
HTML5 introduced new semantic elements like `<header>`, `<footer>`, `<article>`, and `<section>`, 
which provide more meaning to the structure of a webpage and improve accessibility.

2. **Forms Enhancements**: New input types (e.g., `email`, `date`, `number`) and 
attributes (e.g., `placeholder`, `required`) help create better forms and improve user experience and validation.

3. **Canvas**: The `<canvas>` element allows for dynamic, 
scriptable rendering of 2D shapes and bitmap images, useful for creating graphics and animations.

4. **Video and Audio**: The `<video>` and `<audio>` elements enable native embedding of media files without needing third-party plugins.

5. **Offline Capabilities**: HTML5 supports offline storage with the Application Cache (though now largely replaced by Service Workers) and local storage via `localStorage` and `sessionStorage`.

6. **Geolocation**: The Geolocation API allows websites to access the user's location, provided they give consent.

7. **Web Storage**: Local and session storage provide a way to store data on the client side, with improved capacity and easier access compared to cookies.

8. **Web Workers**: Web Workers allow scripts to run in background threads, enabling more complex computations without blocking the main thread and improving performance.

9. **SVG and MathML**: Support for Scalable Vector Graphics (SVG) and Mathematical Markup Language (MathML) allows for more detailed graphics and mathematical expressions directly in HTML.

10. **Microdata**: HTML5 introduced microdata for embedding machine-readable data within HTML documents, making it easier for search engines and other applications to interpret web content.

These features have helped make modern web applications more powerful, efficient, and interactive.




## HTML5 Features

### New Semantic Elements
- **Elements**: 
  - `<header>`: Defines a header for a document or section.
  - `<footer>`: Defines a footer for a document or section.
  - `<article>`: Represents a self-contained piece of content.
  - `<section>`: Defines a section in a document.
  - `<nav>`: Defines navigation links.
  - `<aside>`: Represents content aside from the main content.

### Form Enhancements
- **New Input Types**: `email`, `url`, `number`, `range`, `date`, `time`, etc.
- **Attributes**: 
  - `placeholder`: Displays a hint within an input field.
  - `required`: Specifies that an input field must be filled out.
  - `pattern`: Defines a regular expression for input validation.
- **Example**:
  ```html
  <input type="email" placeholder="Enter your email" required>
  ```

### Multimedia Support
- **Elements**: 
  - `<audio>`: Embeds sound content.
  - `<video>`: Embeds video content.
- **Attributes**: `controls`, `autoplay`, `loop`, `muted`.
- **Example**:
  ```html
  <video width="320" height="240" controls>
      <source src="movie.mp4" type="video/mp4">
      Your browser does not support the video tag.
  </video>
  ```

### Canvas Element
- **Purpose**: Used for drawing graphics via JavaScript.
- **Example**:
  ```html
  <canvas id="myCanvas" width="200" height="100"></canvas>
  <script>
      const canvas = document.getElementById('myCanvas');
      const ctx = canvas.getContext('2d');
      ctx.fillStyle = 'red';
      ctx.fillRect(10, 10, 150, 100);
  </script>
  ```

### Geolocation API
- **Purpose**: Provides access to the userâ€™s geographical location.
- **Example**:
  ```javascript
  if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
          console.log('Latitude: ' + position.coords.latitude);
          console.log('Longitude: ' + position.coords.longitude);
      });
  }
  ```

### Storage
- **Local Storage**: Stores data with no expiration time.
- **Session Storage**: Stores data for the duration of the page session.
- **Example**:
  ```javascript
  // Local Storage
  localStorage.setItem('key', 'value');
  console.log(localStorage.getItem('key')); // Outputs: value

  // Session Storage
  sessionStorage.setItem('key', 'value');
  console.log(sessionStorage.getItem('key')); // Outputs: value
  ```

### Web Workers
- **Purpose**: Allows running scripts in background threads.
- **Example**:
  ```javascript
  // worker.js
  onmessage = function(e) {
      postMessage('Hello ' + e.data);
  };

  // main.js
  const worker = new Worker('worker.js');
  worker.onmessage = function(e) {
      console.log(e.data); // Outputs: Hello [message]
 

 };
  worker.postMessage('World');
  ```

### WebSocket API
- **Purpose**: Provides full-duplex communication channels over a single TCP connection.
- **Example**:
  ```javascript
  const ws = new WebSocket('ws://www.example.com/socketserver');
  ws.onopen = function() {
      ws.send('Hello Server!');
  };
  ws.onmessage = function(event) {
      console.log('Message from server ', event.data);
  };
  ```

### Offline Web Applications
- **Application Cache**: Allows web applications to function offline (Note: deprecated in favor of Service Workers).

### Service Workers
- **Purpose**: Provides background functionality such as offline support and push notifications.
- **Example**:
  ```javascript
  if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/service-worker.js')
          .then(function(registration) {
              console.log('Service Worker registered with scope:', registration.scope);
          });
  }
  ```