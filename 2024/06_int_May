
================================================================================




Q12 what is dom ?

-DOM: DOM stands for â€˜Document Object Modelâ€™.
-It is a structured representation of the HTML elements
that are present in a webpage or web-app.
- JavaScript interacts with the DOM using the document object.  
- The DOM represents all elements, attributes, and content of a web page as objects that can be accessed and manipulated using JavaScript.




- Includes element nodes, text nodes, and attribute nodes.  
- Enables adding, removing, or modifying elements and attributes dynamically.  
- Handles user interactions like clicks, key presses, and other events.  
- Provides methods for navigation (parentNode, childNodes) and modification (setAttribute, appendChild).  
- Allows real-time updates and interactivity in web pages.  



================================================================================



1. **Split Method**:
   - Splits a string into an array of substrings based on a specified separator.
   const str = "Hello,World";
   const arr = str.split(","); // ['Hello', 'World']
   

2. **Reverse Method**:
   - Reverses the order of elements in an array.
   const arr = [1, 2, 3, 4, 5];
   arr.reverse(); // [5, 4, 3, 2, 1]
   

3. **Join Method**:
   - Joins all elements of an array into a single string, separated by a specified separator.
   const arr = ['Hello', 'World'];
   const str = arr.join(", "); // 'Hello, World'
   

These examples demonstrate how each method works in a simple and straightforward manner.








================================================================================
How many way object will create


1. Object Literal
2. Object Constructor
3. The new Keyword
4. Object.assign()
5. Object.create()
6. Object.fromEntries()

1. **Using Object Literal:**
   const obj = {
     name: "John",
     age: 30,
   };


2. **Using Object Constructor:**
   const obj = new Object();
   obj.name = "John";
   obj.age = 30;

3. **Using the new Keyword:**
   function ObjectName(name, age) {
     this.name = name;
     this.age = age;
   }
   const obj = new ObjectName("John", 30);


4. **Using Object.assign():**
   const obj = Object.assign({}, { name: "John", age: 30 });

5. **Using Object.create():**
   const protoObj = { name: "John", age: 30 };
   const obj = Object.create(protoObj);

6. **Using Object.fromEntries():**
   const entries = [['name', 'John'], ['age', 30]];
   const obj = Object.fromEntries(entries);

================================================================================

**Why is `console.log(obj2)` empty?**

Because `Object.create()` creates an object with the given object as its prototype, not its own properties.

```js
var obj2 = Object.create({ name: "av5" });
console.log(obj2);          // ðŸ‘‰ Outputs: {}
console.log(obj2.name);     // ðŸ‘‰ Outputs: "av5"

obj2 = {
  // No own properties
  __proto__: {
    name: "av5"
  }
}
```

`console.log(obj2)` shows `{}` because `obj2` has no own properties â€” it inherits `name` from its prototype.
`Object.create()` sets the passed object as the prototype, not as direct properties.





   ================================================================================
```js
   curried function
   
    curried function is a function that takes one argument at a time, returning a new function each time,
    until all arguments are provided and the final return the result
   
   <!-- This allows for partial application and greater flexibility in function composition and usage. -->
   
   
   function add(a) {
       return function(b) {
           return function(c) {
               return function(d) {
                   return a + b + c + d;
               };
           };
       };
   }
   
   
   const result = add(1)(2)(3)(4); // Result: 10
   console.log(result);
   
   
   
   
   
   function calculateDiscount(baseDiscount) {
       return function(minimumPurchase) {
           return function(isPremiumCustomer) {
               return function(amount) {
                   let discount = baseDiscount;
                   if (minimumPurchase && amount >= minimumPurchase) {
                       discount += 10; // Additional discount for reaching minimum purchase
                   }
                   if (isPremiumCustomer) {
                       discount += 5; // Additional discount for premium customers
                   }
                   return amount - (amount * (discount / 100));
               };
           };
       };
   }
   
   // Apply discounts based on different criteria
   const discountCalculator = calculateDiscount(15)(100)(true);
   const finalPrice = discountCalculator(200); // Result: $170
   
   console.log(finalPrice); // Output: 170
   
   
   
   
   
   Suppose you're building an e-commerce platform, and you have a function that calculates the total price of items in a shopping cart.
    However, different customers may have different discounts based on their membership level. You want to create a flexible function that can calculate the total price for any customer,
     taking into account their membership discount.
   
   // Curried function to calculate total price with discount
   function calculateTotalPrice(discount) {
     return function(items) {
       const totalPrice = items.reduce((acc, item) => acc + item.price, 0);
       return totalPrice * (1 - discount);
     };
   }
   
   // Sample shopping cart items
   const cartItems = [
     { name: 'Product A', price: 20 },
     { name: 'Product B', price: 30 },
     { name: 'Product C', price: 40 }
   ];
   
   // Define discount rates for different membership levels
   const standardDiscount = 0.1; // 10% discount for standard members
   
   // Create specialized version of the calculateTotalPrice function for standard members
   const calculateTotalPriceForStandardMember = calculateTotalPrice(standardDiscount);
   
   // Calculate total price for standard member
   const totalPriceForStandardMember = calculateTotalPriceForStandardMember(cartItems);
   
   console.log("Total price for standard member:", totalPriceForStandardMember); // Output: 81 (10% discount applied)
   
   
   ```
   
   



=========================================================================



### Differences between `map()` and `forEach()`

1. **Return Value**:

   * `map()` returns a **new array** with transformed elements.
   * `forEach()` returns **undefined**.

2. **Immutability**:

   * `map()` is **immutable** â€” it does not change the original array.
   * `forEach()` is **mutable** â€” it can change the original array **if you modify elements inside the loop**.
   * âž• If you don't modify anything inside `forEach()`, the array remains unchanged â€” but it's **capable of mutating**.

3. **Chaining**:

   * `map()` supports **chaining** other array methods like `filter()`, `reduce()`, etc.
   * `forEach()` does **not support chaining** since it returns `undefined`.

4. **Purpose / Use Case**:

   * Use `map()` when you want to **transform and return a new array**.
   * Use `forEach()` when you just need to **loop through items** and perform **side effects** (like logging or DOM updates), without returning anything.

---


Use map() when you want to transform and return a new array.
Use forEach() when you just need to loop through items and perform side effects (like logging or DOM updates), without returning anything.




================================================================================================================================================================

Event loop 

The event loop is a mechanism that allows JavaScript to execute asynchronous code in a single-threaded environment.

with help of  Event loop  we can know  the execution of code in Javascript and also 
 helps manage the execution of asynchronous code,

 
 We have 3 main things here to consider 

 CallStack,
 Micro Task Queue(promise, callbacks, etc.,), 
 Macro Task Queue(setTimeout, setInterval, I/O operations, DOM events, etc.,)


### Call Stack
with help of  Call Stack e JavaScript engine keeps track of function calls.
When a function is called, it is pushed onto the Call Stack.
When the function completes, it is pop out out the stack. 

The Call Stack operates in a last-in-first-out (LIFO) manner.


### Micro Task Queue
Microtas that are executed immediately right after the current script finishes but before the browser performs any rendering or handling of input/output operations.


Microtasks are given higher priority than macrotasks.

The Microtasks Task Queue is used to handle Microtasks, which include:

- Promise callbacks (e.g., `.then`, `.catch`)
- MutationObserver callbacks

The event loop first completes all microtasks before moving on to macrotasks.



### Macro Task Queue

Macro tasks are executed after all microtasks have been completed.



The Macro Task Queue is used to handle macrotasks, which include:

- `setTimeout`
- `setInterval`
- I/O operations
- DOM events (e.g., `click`, `load`)



 It works by constantly checking two queues: the microtask queue and the macrotask queue. 
 <!-- These queues store the callbacks of the asynchronous operations that are waiting to be executed. -->

 The main difference between microtask and macrotask queue is their priority. 
 The event loop always gives higher priority to the microtask queue, a
 and will process all the callbacks in the microtask queue before moving on to the macrotask queue. 





### How the Event Loop Works
1. **Execution Context:** JavaScript starts by executing the global context, which is the main code file.
2. **Call Stack:** Functions are pushed onto the Call Stack and executed. If a function contains an asynchronous operation (e.g., `setTimeout`), the operation is offloaded to the browser or Node.js environment.
3. **Task Queues:** 
   - When an asynchronous operation completes, its callback is placed into the appropriate queue (Micro Task Queue or Macro Task Queue).
4. **Event Loop:** 
   - The event loop continuously checks the Call Stack. If the Call Stack is empty, it starts processing the Micro Task Queue.
   - All microtasks are processed before moving on to the Macro Task Queue.
   - Once the Micro Task Queue is empty, the event loop will process one task from the Macro Task Queue.

### Example

Consider the following code:

```javascript
console.log('Start');

setTimeout(() => {
  console.log('Timeout');
}, 0);

Promise.resolve().then(() => {
  console.log('Promise');
});

console.log('End');
```

**Execution Flow:**

1. `'Start'` is logged to the console.
2. `setTimeout` is called, its callback is placed in the Macro Task Queue.
3. `Promise.resolve().then` is called, its callback is placed in the Micro Task Queue.
4. `'End'` is logged to the console.
5. The Call Stack is now empty.
6. The event loop checks the Micro Task Queue and executes the promise callback, logging `'Promise'` to the console.
7. The event loop then checks the Macro Task Queue and executes the timeout callback, logging `'Timeout'` to the console.

**Output:**
```
Start
End
Promise
Timeout
```

By understanding the event loop and its components, you can better manage asynchronous operations in JavaScript and predict the order of execution for your code.

<!-- Microtasks are operations scheduled to run right after the current script finishes but before the browser performs any rendering or handling of input/output operations. -->

<!-- Microtasks are tasks that are executed immediately after the currently executing script and before any rendering or I/O operations. -->


<!-- 
The Event loop is a concept that helps us to know the execution of code in Javascript. 

The event loop in JavaScript is a fundamental concept that helps manage the execution of asynchronous code, -->

 <!-- single-threaded environment of JavaScript to handle concurrent operations. 
 It works by constantly checking two queues: the microtask queue and the macrotask queue. These queues store the callbacks of the asynchronous operations that are waiting to be executed.

 The main difference between microtask and macrotask queue is their priority. 
 The event loop always gives higher priority to the microtask queue, and will process all the callbacks in the microtask queue before moving on to the macrotask queue. -->



<!-- The Call Stack is where the JavaScript engine keeps track of function calls. -->

 -->
<!-- Macrotasks are tasks that are scheduled to be executed after the current executing script and after all microtasks have been processed -->






================================================================================================================================================================
Single-Threaded Execution:

JavaScript executes code in a single-threaded manner, meaning one operation is performed at a time.
The event loop helps manage this single-threaded execution, especially for asynchronous tasks.





================================================================================
Callback hell



Callback hell is a phenomenon where a Callback is called inside another Callback. 
It is the nesting of multiple Callbacks inside a function. 

where multiple asynchronous operations are nested within each other as callbacks.
This can result in code that is difficult to read, understand, and maintain

 The two common ways of escaping the callback Hell heare are by using promises and async/await.

// Nested callbacks
doSomething(function(result1) {
  doSomethingElse(result1, function(result2) {
    doAnotherThing(result2, function(result3) {
      console.log('Final Result:', result3);
    });
  });
});

// Using Promises
doSomething()
  .then(result1 => {
    return doSomethingElse(result1);
  })
  .then(result2 => {
    return doAnotherThing(result2);
  })
  .then(result3 => {
    console.log('Final Result:', result3);
  })
  .catch(error => {
    console.error('Error:', error);
  });




