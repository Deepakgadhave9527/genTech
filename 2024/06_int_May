


================================================================================



1. **Split Method**:
   - Splits a string into an array of substrings based on a specified separator.
   const str = "Hello,World";
   const arr = str.split(","); // ['Hello', 'World']
   

2. **Reverse Method**:
   - Reverses the order of elements in an array.
   const arr = [1, 2, 3, 4, 5];
   arr.reverse(); // [5, 4, 3, 2, 1]
   

3. **Join Method**:
   - Joins all elements of an array into a single string, separated by a specified separator.
   const arr = ['Hello', 'World'];
   const str = arr.join(", "); // 'Hello, World'
   

These examples demonstrate how each method works in a simple and straightforward manner.








================================================================================
How many way object will create


1. Object Literal
2. Object Constructor
3. The new Keyword
4. Object.assign()
5. Object.create()
6. Object.fromEntries()

1. **Using Object Literal:**
   const obj = {
     name: "John",
     age: 30,
   };


2. **Using Object Constructor:**
   const obj = new Object();
   obj.name = "John";
   obj.age = 30;

3. **Using the new Keyword:**
   function ObjectName(name, age) {
     this.name = name;
     this.age = age;
   }
   const obj = new ObjectName("John", 30);


4. **Using Object.assign():**
   const obj = Object.assign({}, { name: "John", age: 30 });

5. **Using Object.create():**
   const protoObj = { name: "John", age: 30 };
   const obj = Object.create(protoObj);

6. **Using Object.fromEntries():**
   const entries = [['name', 'John'], ['age', 30]];
   const obj = Object.fromEntries(entries);










   ================================================================================

   curried function
   
    curried function is a function that takes one argument at a time, returning a new function each time,
    until all arguments are provided and the final return the result
   
   <!-- This allows for partial application and greater flexibility in function composition and usage. -->
   
   
   function add(a) {
       return function(b) {
           return function(c) {
               return function(d) {
                   return a + b + c + d;
               };
           };
       };
   }
   
   
   const result = add(1)(2)(3)(4); // Result: 10
   console.log(result);
   
   
   
   
   
   function calculateDiscount(baseDiscount) {
       return function(minimumPurchase) {
           return function(isPremiumCustomer) {
               return function(amount) {
                   let discount = baseDiscount;
                   if (minimumPurchase && amount >= minimumPurchase) {
                       discount += 10; // Additional discount for reaching minimum purchase
                   }
                   if (isPremiumCustomer) {
                       discount += 5; // Additional discount for premium customers
                   }
                   return amount - (amount * (discount / 100));
               };
           };
       };
   }
   
   // Apply discounts based on different criteria
   const discountCalculator = calculateDiscount(15)(100)(true);
   const finalPrice = discountCalculator(200); // Result: $170
   
   console.log(finalPrice); // Output: 170
   
   
   
   
   
   Suppose you're building an e-commerce platform, and you have a function that calculates the total price of items in a shopping cart.
    However, different customers may have different discounts based on their membership level. You want to create a flexible function that can calculate the total price for any customer,
     taking into account their membership discount.
   
   <script>
   // Curried function to calculate total price with discount
   function calculateTotalPrice(discount) {
     return function(items) {
       const totalPrice = items.reduce((acc, item) => acc + item.price, 0);
       return totalPrice * (1 - discount);
     };
   }
   
   // Sample shopping cart items
   const cartItems = [
     { name: 'Product A', price: 20 },
     { name: 'Product B', price: 30 },
     { name: 'Product C', price: 40 }
   ];
   
   // Define discount rates for different membership levels
   const standardDiscount = 0.1; // 10% discount for standard members
   
   // Create specialized version of the calculateTotalPrice function for standard members
   const calculateTotalPriceForStandardMember = calculateTotalPrice(standardDiscount);
   
   // Calculate total price for standard member
   const totalPriceForStandardMember = calculateTotalPriceForStandardMember(cartItems);
   
   console.log("Total price for standard member:", totalPriceForStandardMember); // Output: 81 (10% discount applied)
   
   
   
   
   