=========================================================================


### Session Storage:
- Data stored in session storage is scoped to the current browsing session.
- It is only available within the same tab or window that created it.
- Data is lost when the tab or window is closed or the session ends.
- Each browsing session maintains its own separate session storage.
- Data stored in one session will not be accessible in another session, even if it's on the same website.


1. Storing Data:

sessionStorage.setItem('key', 'value');

2. Retrieving Data:

var value = sessionStorage.getItem('key');

3. Removing an Item:

sessionStorage.removeItem('key');

4. Clearing All Data:

sessionStorage.clear();


### Local Storage:

- Data stored in local storage is scoped to the same origin (protocol, domain, and port).
- It is accessible across multiple tabs and windows of the same origin.
- Data available even after the browser is closed and reopened.
- Each origin maintains its own separate local storage.
- Data stored in local storage will be available across different sessions, allowing for continuity of user preferences and application state.

Here's how you can use JavaScript to store, retrieve, and clear data from both Session Storage and Local Storage, along with methods for removing individual items and clearing all stored data:



1. Storing Data:

localStorage.setItem('key', 'value');

2. Retrieving Data:

var value = localStorage.getItem('key');

3. Removing an Item:

localStorage.removeItem('key');

4. Clearing All Data:

localStorage.clear();





==============================================
### parse

- `JSON.parse()` takes a JSON string and transforms it into a JavaScript object.


```javascript
// Converting a JSON string to a JavaScript object
const jsonString = '{"name":"John", "age":30, "city":"New York"}';
const jsonObject = JSON.parse(jsonString);
console.log(jsonObject);  // Output: {name: "John", age: 30, city: "New York"}

### stringify

- `JSON.stringify()` takes a JavaScript object and transforms it into a JSON string.

// Converting a JavaScript object to a JSON string
const jsObject = {name: "Jane", age: 25, city: "Chicago"};
const jsonStr = JSON.stringify(jsObject);
console.log(jsonStr);  // Output: '{"name":"Jane","age":25,"city":"Chicago"}'

=========================================================================
//===========================Bubbling and Capturing =========================


A) Bubbling

-The bubbling principle is simple.
-When an event happens on an element, it first runs the handlers on it,
then on its parent, then all the way up on other ancestors.

-With bubbling, the event is first captured and handled by the innermost element and
then propagated to outer elements.


B] capturing

- capturing principle is simple.
-when an event happen on element ,it first run the parent element of then lastly run handler


-With capturing, the event is first captured by the outermost element and
propagated to the inner elements.

In event capturing, the event is handled before it reaches the target. You must explicitly enable it by passing true as the third argument in addEventListener

document.getElementById("parent").addEventListener("click", () => {
  console.log("Parent clicked (capture)");
}, true);



-Capturing is also called "trickling", which helps remember the propagation order:

stopPropagation prevents further propagation of the current event in the capturing and bubbling phases.

preventDefault prevents the default action the browser makes on that event.





=========================================================================
- `preventDefault()` is a JavaScript method used to stop the default action associated with an event from occurring.
  - Example: Prevent a form from submitting.
  - Example: Prevent a link from navigating to a new page.
  - Example: Prevent a context menu from appearing.


- `stopPropagation()` is a JavaScript method used to prevent an event from bubbling up the event chain.
  - When an event is triggered, it normally propagates up from the target element to its ancestors in the DOM.
  - By calling `stopPropagation()` on the event object, you stop this propagation.
  - Ensures that the event doesn't trigger handlers on parent elements.
  - Useful when you want to manage the event at the specific element level without affecting its ancestors.
  - Prevents Bubbling: Stops the event from bubbling up to parent elements.


 `stopImmediatePropagation()` 
  stopImmediatePropagation prevents the event from triggering other event listeners on the same element and stops the event from bubbling up the DOM tree.

  stopImmediatePropagation stops the current event from calling any more event listeners on the same element and stops it from moving up to parent elements.

=========================================================================
### Pure Functions
- *Deterministic*: Always return the same output for the same input.
- *No Side Effects*: Do not alter external state or rely on it.
- *Benefits*: Easier to understand, test, compose, and optimize (e.g., memoization).

*Example*:
javascript
function add(a, b) {
    return a + b;
}

console.log(add(2, 3)); // Always returns 5


### Impure Functions
- *Non-deterministic*: Output can vary for the same input.
- *Side Effects*: Modify external state, perform I/O operations, etc.
- *Challenges*: Harder to reason about, test, and maintain.

*Example*:
javascript
let count = 0;

function increment() {
    count += 1;
    return count;
}

console.log(increment()); // Output depends on external `count` variable


### Summary
- *Pure functions*: Predictable, testable, and composable.
- *Impure functions*: Necessary for state changes and I/O operations but harder to manage.



=========================================================================

Generators and iterators are closely related concepts in JavaScript that allow for efficient handling of sequences and collections of data. Here's an overview of both, including their definitions, usage, and how they interrelate.

### Iterators

**Iterators** are objects that allow for sequential access to elements in a collection, one at a time. An iterator must implement a `next()` method that returns an object with two properties:
- `value`: The next value in the sequence.
- `done`: A boolean indicating whether the iteration is complete.

#### Example of an Iterator:

const myArray = [1, 2, 3];
const iterator = myArray[Symbol.iterator]();

console.log(iterator.next()); // { value: 1, done: false }
console.log(iterator.next()); // { value: 2, done: false }
console.log(iterator.next()); // { value: 3, done: false }
console.log(iterator.next()); // { value: undefined, done: true }


====================================================================


### Generators

**Generators** are special functions that can pause their execution and resume it later. 
allowing for control over the function's execution.

<!-- It allow to control excuation of function 
They return a generator object, which is both an iterator and an iterable. -->

They are defined using the function* syntax and use the yield keyword to pause execution.

The yield keyword in a generator function is used to pause the function's execution and return a value.

The main method of a generator is next()

The result of next() is always an object with two properties:
value: the yielded value.
done: true if the function code has finished, otherwise false.

#### Example of a Generator:

function* simpleGenerator() {
    yield 1;
    yield 2;
    yield 3;
}

const gen = simpleGenerator();

console.log(gen.next()); // { value: 1, done: false }
console.log(gen.next()); // { value: 2, done: false }
console.log(gen.next()); // { value: 3, done: false }
console.log(gen.next()); // { value: undefined, done: true }


-  simpleGenerator is a generator function.
-  Calling simpleGenerator() returns a generator object gen.
-  gen is an object that implements the iterator protocol, with a next() -  method that returns the next value in the sequence.
-  Generators are objects in JavaScript.




==============================================
- **`for...in`**: Iterates over object keys (properties).
- **`for...of`**: Iterates over iterable values (arrays, strings, etc.).

Use `for...in` for objects, `for...of` for arrays and other iterables.


const obj = { a: 1, b: 2, c: 3 };

for (let key in obj) {
  console.log(key); // Output: "a", "b", "c"
  console.log(obj[key]); // Output: 1, 2, 3 (corresponding values)
}



const arr = [1, 2, 3];

for (let value of arr) {
  console.log(value); // Output: 1, 2, 3
}

======================================================



- **`map()`**: Transforms each element of an array and returns a new array.
- **`for...of`**: Iterates over values of an iterable (like arrays, strings) one by one.
=======

=========================================


(var x = 1; x < 5; x++) {
  setTimeout(() => {
    console.log(x);
  }, 1000);
}

 (let x = 1; x < 5; x++) {
  setTimeout(() => {
    console.log(x);
  }, 1);
}

Since var does not create a new scope for each iteration, all callbacks reference the same x varibale.
Since let creates a new scope for each iteration, each callback references its own unique x varibale.

### First Loop (Using var):

- *Scope*: var is function-scoped, meaning the variable x is shared across all iterations of the loop.
- *Closure*: The setTimeout callback captures this shared x. Since var does not create a new scope for each iteration, all callbacks reference the same x varibale.
- *Event Loop*: The setTimeout function schedules the callback to run after 1000 milliseconds (1 second). By the time the event loop processes these callbacks, the loop has already finished, and x is 5.

*Output*: After 1000 milliseconds, all four callbacks run and log 5 four times.

### Second Loop (Using let):

- *Scope*: let is block-scoped, meaning each iteration of the loop has its own separate instance of x.
- *Closure*: The setTimeout callback captures the x from its specific iteration. Since let creates a new scope for each iteration, each callback references its own unique x varibale.
- *Event Loop*: The setTimeout function schedules the callback to run after 1 millisecond. By the time the event loop processes these callbacks, each one has its own captured value of x from the iteration in which it was created.

*Output*: After 1 millisecond, the callbacks run and log 1, 2, 3, and 4 respectively.


## JavaScript Scoping and Closures

### Scoping with `var` vs. `let`

#### Using `var`
- **Scope**: `var` is function-scoped, meaning the variable `x` is shared across all iterations of the loop.
- **Closure**: The `setTimeout` callback captures this shared `x`. Since `var` does not create a new scope for each iteration, all callbacks reference the same `x`.
- **Event Loop**: The `setTimeout` function schedules the callback to run after 1000 milliseconds (1 second). By the time the event loop processes these callbacks, the loop has finished, and `x` is 5.
- **Output**: After 1000 milliseconds, all four callbacks run and log `5` four times.
- **Example**:
  ```javascript
  for (var x = 1; x < 5; x++) {
      setTimeout(() => {
          console.log(x);
      }, 1000);
  }
  ```

#### Using `let`
- **Scope**: `let` is block-scoped, meaning each iteration of the loop has its own separate instance of `x`.
- **Closure**: The `setTimeout` callback captures the `x` from its specific iteration. Since `let` creates a new scope for each iteration, each callback references its own unique `x`.
- **Event Loop**: The `setTimeout` function schedules the callback to run after 1 millisecond. By the time the event loop processes these callbacks, each one has its own captured value of `x` from the iteration in which it was created.
- **Output**: After 1 millisecond, the callbacks run and log `1`, `2`, `3`, and `4` respectively.
- **Example**:
  ```javascript
  for (let x = 1; x < 5; x++) {
      setTimeout(() => {
          console.log(x);
      }, 1);
  }
  ```


### Closures
- **Definition**: A closure is a function that "remembers" the variables from the place where it was created, even if it's executed in a different context.

========================================================

Event delegation

Event delegation in JavaScript is a technique where you attach a single event listener to a parent element, rather than to multiple child elements individually.
This approach leverages event bubbling in the DOM, where an event occurring on a nested element will bubble up through its ancestors.

Here's how event delegation works:

1. **Attach Listener to Parent Element**: Instead of attaching event listeners to each child element, you attach a single event listener to the parent element that contains all the child elements you are interested in.

2. **Use Event Bubbling**: When an event happens (like a click) on a child element, the event bubbles up through its ancestors in the DOM hierarchy.

3. **Check the Target Element**: In the event handler function attached to the parent element, you can check the `event.target` property to determine which specific child element triggered the event. This allows you to conditionally execute different actions based on which child element was clicked.

### Example:

Suppose you have a list of items in an unordered list (`<ul>`) and you want to handle click events on each list item (`<li>`).

<ul id="parentList">
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
</ul>

In JavaScript, you can delegate the click event handling to the parent `<ul>` element:

const parentList = document.getElementById('parentList');

parentList.addEventListener('click', function(event) {
    if (event.target.tagName === 'LI') {
        console.log('Clicked on:', event.target.textContent);
        // Perform actions based on the clicked list item
    }
});

In this example:

- The `click` event listener is added to the `parentList`.
- When a `<li>` element is clicked, the event bubbles up to the `parentList`.
- Inside the event handler, `event.target` refers to the actual element that triggered the event (in this case, the `<li>`).
- You can then perform actions based on the specific `<li>` element that was clicked.

========================================================
    flat()== method creates a new array with all sub-array elements concatenated into it recursively up to the specified
    depth.**
    arr = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];
    arr.flat(Infinity);
    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

========================================================================
Scope Chain 

Scope Chain in JavaScript refers to the process by which JavaScript determines where to look for variables when they're accessed in different scopes. When a variable or function is referenced, JavaScript starts by searching in the current scope. If it doesn't find it there, it moves up to the next outer scope, and this continues until it either finds the variable or reaches the global scope. This process forms a "chain" of scopes, linking inner and outer scopes together.

The scope chain stops when the required variable is found or when the global scope is reached and the variable is not found, leading to a ReferenceError. This mechanism allows inner functions to access variables from outer scopes but not vice versa.

So, your explanation is close, but it’s important to emphasize that the scope chain is about the order in which JavaScript searches for variables, rather than variables or functions "using" each other. The search moves outward from the innermost scope to the global scope.
