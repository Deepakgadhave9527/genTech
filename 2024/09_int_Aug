

### parse

- `JSON.parse()` takes a JSON string and transforms it into a JavaScript object.


```javascript
// Converting a JSON string to a JavaScript object
const jsonString = '{"name":"John", "age":30, "city":"New York"}';
const jsonObject = JSON.parse(jsonString);
console.log(jsonObject);  // Output: {name: "John", age: 30, city: "New York"}

### stringify

- `JSON.stringify()` takes a JavaScript object and transforms it into a JSON string.

// Converting a JavaScript object to a JSON string
const jsObject = {name: "Jane", age: 25, city: "Chicago"};
const jsonStr = JSON.stringify(jsObject);
console.log(jsonStr);  // Output: '{"name":"Jane","age":25,"city":"Chicago"}'



=========================================================================
- `preventDefault()` is a JavaScript method used to stop the default action associated with an event from occurring.
  - Example: Prevent a form from submitting.
  - Example: Prevent a link from navigating to a new page.
  - Example: Prevent a context menu from appearing.


- `stopPropagation()` is a JavaScript method used to prevent an event from bubbling up the event chain.
  - When an event is triggered, it normally propagates up from the target element to its ancestors in the DOM.
  - By calling `stopPropagation()` on the event object, you stop this propagation.
  - Ensures that the event doesn't trigger handlers on parent elements.
  - Useful when you want to manage the event at the specific element level without affecting its ancestors.
  - Prevents Bubbling: Stops the event from bubbling up to parent elements.


 `stopImmediatePropagation()` 
  stopImmediatePropagation prevents the event from triggering other event listeners on the same element and stops the event from bubbling up the DOM tree.

  stopImmediatePropagation stops the current event from calling any more event listeners on the same element and stops it from moving up to parent elements.

=========================================================================
### Pure Functions
- *Deterministic*: Always return the same output for the same input.
- *No Side Effects*: Do not alter external state or rely on it.
- *Benefits*: Easier to understand, test, compose, and optimize (e.g., memoization).

*Example*:
javascript
function add(a, b) {
    return a + b;
}

console.log(add(2, 3)); // Always returns 5


### Impure Functions
- *Non-deterministic*: Output can vary for the same input.
- *Side Effects*: Modify external state, perform I/O operations, etc.
- *Challenges*: Harder to reason about, test, and maintain.

*Example*:
javascript
let count = 0;

function increment() {
    count += 1;
    return count;
}

console.log(increment()); // Output depends on external `count` variable


### Summary
- *Pure functions*: Predictable, testable, and composable.
- *Impure functions*: Necessary for state changes and I/O operations but harder to manage.

=========================================================================

Generators and iterators are closely related concepts in JavaScript that allow for efficient handling of sequences and collections of data. Here's an overview of both, including their definitions, usage, and how they interrelate.

### Iterators

**Iterators** are objects that allow for sequential access to elements in a collection, one at a time. An iterator must implement a `next()` method that returns an object with two properties:
- `value`: The next value in the sequence.
- `done`: A boolean indicating whether the iteration is complete.

#### Example of an Iterator:

const myArray = [1, 2, 3];
const iterator = myArray[Symbol.iterator]();

console.log(iterator.next()); // { value: 1, done: false }
console.log(iterator.next()); // { value: 2, done: false }
console.log(iterator.next()); // { value: 3, done: false }
console.log(iterator.next()); // { value: undefined, done: true }


====================================================================


### Generators

**Generators** are special functions that can pause their execution and resume it later. 
allowing for control over the function's execution.

<!-- It allow to control excuation of function 
They return a generator object, which is both an iterator and an iterable. -->

They are defined using the function* syntax and use the yield keyword to pause execution.

The yield keyword in a generator function is used to pause the function's execution and return a value.

The main method of a generator is next()

The result of next() is always an object with two properties:
value: the yielded value.
done: true if the function code has finished, otherwise false.

#### Example of a Generator:

function* simpleGenerator() {
    yield 1;
    yield 2;
    yield 3;
}

const gen = simpleGenerator();

console.log(gen.next()); // { value: 1, done: false }
console.log(gen.next()); // { value: 2, done: false }
console.log(gen.next()); // { value: 3, done: false }
console.log(gen.next()); // { value: undefined, done: true }


-  simpleGenerator is a generator function.
-  Calling simpleGenerator() returns a generator object gen.
-  gen is an object that implements the iterator protocol, with a next() -  method that returns the next value in the sequence.
-  Generators are objects in JavaScript.




===================================================================

### Why Use Promises Instead of Callbacks?

1. **Readability**: Avoids "callback hell" with cleaner code.
2. **Error Handling**: Centralized error handling with `.catch()`.
3. **Control**: Maintains control over asynchronous flow.
4. **Composability**: Easily run and manage multiple async operations.

Promises can be composed using methods like Promise.all, Promise.race, Promise.allSettled, and Promise.any. This allows for running multiple asynchronous operations in parallel and handling their results collectively.

5. **Standardization**: Native support in modern JavaScript (ES6).

Promises are a part of the ES6 (ECMAScript 2015) standard, meaning they are natively supported in modern JavaScript engines and have a consistent behavior across different environments.
===================================

 What is the DOM?
The DOM is the Document Object Model, which is a tree-like structure that represents the HTML document. 
It is used by JavaScript to access and manipulate the document.

==============================================
- **`for...in`**: Iterates over object keys (properties).
- **`for...of`**: Iterates over iterable values (arrays, strings, etc.).

Use `for...in` for objects, `for...of` for arrays and other iterables.


const obj = { a: 1, b: 2, c: 3 };

for (let key in obj) {
  console.log(key); // Output: "a", "b", "c"
  console.log(obj[key]); // Output: 1, 2, 3 (corresponding values)
}



const arr = [1, 2, 3];

for (let value of arr) {
  console.log(value); // Output: 1, 2, 3
}

======================================================



- **`map()`**: Transforms each element of an array and returns a new array.
- **`for...of`**: Iterates over values of an iterable (like arrays, strings) one by one.
=======

=========================================


(var x = 1; x < 5; x++) {
  setTimeout(() => {
    console.log(x);
  }, 1000);
}

 (let x = 1; x < 5; x++) {
  setTimeout(() => {
    console.log(x);
  }, 1);
}

Since var does not create a new scope for each iteration, all callbacks reference the same x varibale.
Since let creates a new scope for each iteration, each callback references its own unique x varibale.

### First Loop (Using var):

- *Scope*: var is function-scoped, meaning the variable x is shared across all iterations of the loop.
- *Closure*: The setTimeout callback captures this shared x. Since var does not create a new scope for each iteration, all callbacks reference the same x varibale.
- *Event Loop*: The setTimeout function schedules the callback to run after 1000 milliseconds (1 second). By the time the event loop processes these callbacks, the loop has already finished, and x is 5.

*Output*: After 1000 milliseconds, all four callbacks run and log 5 four times.

### Second Loop (Using let):

- *Scope*: let is block-scoped, meaning each iteration of the loop has its own separate instance of x.
- *Closure*: The setTimeout callback captures the x from its specific iteration. Since let creates a new scope for each iteration, each callback references its own unique x varibale.
- *Event Loop*: The setTimeout function schedules the callback to run after 1 millisecond. By the time the event loop processes these callbacks, each one has its own captured value of x from the iteration in which it was created.

*Output*: After 1 millisecond, the callbacks run and log 1, 2, 3, and 4 respectively.

========================================================

Event delegation

Event delegation in JavaScript is a technique where you attach a single event listener to a parent element, rather than to multiple child elements individually.
This approach leverages event bubbling in the DOM, where an event occurring on a nested element will bubble up through its ancestors.

Here's how event delegation works:

1. **Attach Listener to Parent Element**: Instead of attaching event listeners to each child element, you attach a single event listener to the parent element that contains all the child elements you are interested in.

2. **Use Event Bubbling**: When an event happens (like a click) on a child element, the event bubbles up through its ancestors in the DOM hierarchy.

3. **Check the Target Element**: In the event handler function attached to the parent element, you can check the `event.target` property to determine which specific child element triggered the event. This allows you to conditionally execute different actions based on which child element was clicked.

### Example:

Suppose you have a list of items in an unordered list (`<ul>`) and you want to handle click events on each list item (`<li>`).

<ul id="parentList">
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
</ul>

In JavaScript, you can delegate the click event handling to the parent `<ul>` element:

const parentList = document.getElementById('parentList');

parentList.addEventListener('click', function(event) {
    if (event.target.tagName === 'LI') {
        console.log('Clicked on:', event.target.textContent);
        // Perform actions based on the clicked list item
    }
});

In this example:

- The `click` event listener is added to the `parentList`.
- When a `<li>` element is clicked, the event bubbles up to the `parentList`.
- Inside the event handler, `event.target` refers to the actual element that triggered the event (in this case, the `<li>`).
- You can then perform actions based on the specific `<li>` element that was clicked.

========================================================
class,List

with help of class,List JavaScript allows us to add, remove, replace, toggle or check whether the specified CSS class,s is present or not


add()	Adds one or more tokens to the list
contains()	Returns true if the list contains a class,s
remove()	Removes one or more tokens from the list
toggle()	Toggles between tokens in the list
replace()	Replaces a token in the list


========================================================
    flat()== method creates a new array with all sub-array elements concatenated into it recursively up to the specified
    depth.**
    arr = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];
    arr.flat(Infinity);
    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
========================================================

A framework is a set of pre-written code that provides a structure for developing software applications. 

A library, on the other hand, is a collection of pre-written code that can be used to perform specific tasks.




========================================================

yes, you can use createRef() in a React functional component, but its not recommended. 
Its better to use useRef() instead, ass it is designed specifically for functional components and provides the same functionality

===========================================



console.log(null == undefined); // Output: true
console.log(null === undefined); // Output: false


- `null == undefined`:
In this case, both `null` and `undefined` are considered loosely equal because they represent absence of value. 
 Therefore, `null == undefined` evaluates to `true`.
  
- `null === undefined`: The `===` operator checks for strict equality without type conversion.
 It compares both the value and the type of the operands.
 
  `null === undefined` evaluates to `false`.



 Since `null` and `undefined` are of different types (`null` is of type `"object"` and `undefined` is of type `"undefined"`),

  //=======================================


1. console.log(typeof undefined);`
   - This will output `undefined`. In JavaScript, `typeof undefined` returns `"undefined"` because `undefined` is a type representing an uninitialized or non-existent value.

2. `console.log(typeof null);`
   - This will output `"object"`. This is a historical quirk in JavaScript. `typeof null` returns `"object"` because `null` is considered a primitive value that represents the intentional absence of any object value.

3. `console.log(typeof NaN);
   - This will output `"number"`. `NaN` stands for "Not-a-Number" and is considered a special value in JavaScript of the number type. Therefore, `typeof NaN` returns `"number"`.

   console.log(typeof undefined); // Output: "undefined"
   console.log(typeof null);      // Output: "object"
   console.log(typeof NaN);       // Output: "number"
   
//=======================================
console.log(typeof NaN); // Outputs: "number"

typeof NaN returns "number" in JavaScript because NaN 
(Not a Number) is categorized as a numeric value within the language's type system


//=======================================


console.log(NaN === NaN); // Outputs: false
console.log(NaN == NaN); // Outputs: false


Both NaN === NaN and NaN == NaN evaluate to false in JavaScript
 because NaN is considered not equal to any value, including NaN itself.


 //=======================================


console.log(1 < 2 < 3); outputs true because 1 < 2 evaluates to true, and then true < 3 (which is 1 < 3) also evaluates to true.
console.log(3 > 2 > 1); outputs false because 3 > 2 evaluates to true, but then true > 1 (which is 1 > 1) evaluates to false

Chained Comparisons: When you chain comparison operators like 1 < 2 < 3, JavaScript evaluates them sequentially from left to right.
Type Coercion: JavaScript implicitly converts true and false to 1 and 0 respectively when compared with numeric values.


//=======================================


1. **String Concatenation with `+`:**
   
   console.log("5" + 3); // "53"
   
   - The `+` operator treats the operation as string concatenation because one operand is a string.

2. **Arithmetic Operations with `-`, `*`, `/`:**
   
   console.log("5" - 3); // 2
   console.log("5" * 3); // 15
   console.log("5" / 3); // 1.6666666666666667
   
   - The `-`, `*`, and `/` operators treat the operation as arithmetic, so they convert the string `"5"` to the number `5`.

### Summary:
- The `+` operator can perform both string concatenation and numeric addition. If one operand is a string, JavaScript concatenates.
- The `-`, `*`, and `/` operators only perform arithmetic operations and convert their operands to numbers if necessary.

