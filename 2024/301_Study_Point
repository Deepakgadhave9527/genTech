
===========================================================================

use multiple <Routes> components and include both routing components (RootRouter and RootRouter2) in your App component, is not the recommended approach.

Multiple <Routes> Components: Using multiple <Routes> components can lead to routing conflicts and unpredictable behavior. React Router is designed to handle routing with a single <Routes> component.


### Absolute Paths
Absolute paths are full paths starting from the root of the application

Absolute paths start from the root of the application and are prefixed with a leading slash (/). They are used to navigate to routes from anywhere within the application.


<Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/contact" element={<Contact />} />
      </Routes>
    </Router>

Use a leading slash (/) with the <Link> component when you want to navigate to an absolute path from the root of the application.

<Link to="/about">About</Link>

### Relative Paths
Relative paths are used within nested routes.

Relative paths are used within nested routes. 
They do not use a leading slash and are relative to the current route's parent.
<Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/dashboard" element={<Dashboard />}>
          <Route path="profile" element={<UserProfile />} />
          <Route path="settings" element={<Settings />} />
        </Route>
      </Routes>
    </Router>

Do not use a leading slash when you want to navigate to a path relative to the current route.

<Link to="profile">Profile</Link>



When you see the error about absolute paths in nested routes, it usually means that you’ve defined a child route path as an absolute path, which is not allowed. Nested routes must use relative paths.



===========================================================================




- **`while` Loop**: Checks the condition before executing the code block. If the condition is false initially, the code block inside the loop will not execute at all.

  **Syntax:**
  ```javascript
  while (condition) {
    // Code to execute
  }
  ```

  **Example:**
  ```javascript
  let count = 1;

  while (count > 5) {
    console.log(count);
    count++;
  }

  - **`while` Loop**:
  - Condition is checked before the loop executes.
  - If the condition is false initially, the code block may not execute at all.
  
===========================================================================

In JavaScript, a do...while loop is used to execute a block of code at least once before checking a condition, and then it repeatedly executes the block as long as the condition remains true.

do {
  // Block of code to be executed
} while (condition);



  **Syntax:**
  ```javascript
  do {
    // Code to execute
  } while (condition);
  ```

  **Example:**
  ```javascript
  let count = 1;

  do {
    console.log(count);
    count++;
  } while (count > 5);



- **`do...while` Loop**:
  - Code block is executed before the condition is checked.
  - Guarantees at least one execution of the code block.

  
  ### ===========================================================================

### 2. **When to Use**

- **`while` Loop**: Use this when you want to run a block of code as long as a condition is true, and you don’t necessarily need to execute the code block if the condition is initially false.


- **`do...while` Loop**: Use this when you need to execute the code block at least once regardless of the condition. This is useful when the code block needs to run before any condition is evaluated.


### 3. **Execution Example**

Here’s a practical example showing the difference:

**while` Loop Example:**
```javascript
let num = 0;

while (num > 0) {
  console.log("This won't run because num is 0");
  num--;
}
```

**`do...while` Loop Example:**
```javascript
let num = 0;

do {
  console.log("This will run once, even though num is 0");
  num--;
} while (num > 0);
```
===========================================================================

