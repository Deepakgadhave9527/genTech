==============================================================

    What are hooks ?

    -Hooks are the new feature introduced in the React 16.8 version.
    -With help of the React Hook we can use  state and other React features without writing a class.
    -usually hook start the use keyword
    -React Hooks features to handle the local component state.
    -With help of the React Hook we can also use  react lifecycle features in function component
    -Hooks dont work inside class component

==============================================================

### 01 useState()

-useState() is a React Hook used to add state to functional components.

-It returns an array with two elements:

1.The current state value.
2.A function to update that state.

## const [state,setState]=React.useState(0)

-state holds the current state value.
-setState is the function used to update state value.
-0 is the initial state value.

- useState should be used only inside functional components.

  ## const [state,setState]=React.useState()

  -state can be maintained by using useState() hook.

  The first parameter in the state is the current state value.
  The second parameter is the function that will allow you to update the state value.

  useState should be used only inside functional components.

  useState state is hook maintained local state in the component

================================================================

### 02 `useReducer()`

- `useReducer()` is a React Hook used to manage complex state logic inside functional components.

- It is an alternative to `useState()` when:

  - State updates depend on previous state.
  - Multiple related state variables need to be updated together.
  - The state logic is more complicated or requires multiple conditions.

- Syntax:

  ```javascript
  const [state, dispatch] = useReducer(reducer, initialState);
  ```

- It takes two arguments:

  1. `reducer`: a function that takes the current state and an action, and returns the new state.
  2. `initialState`: the initial value of the state.

- The `reducer` function handles state transitions based on the dispatched actions.
- The `dispatch` function is used to send actions to the reducer.

- `useReducer()` is useful for managing form states, complex calculations, and state machines.

```javascript
const INITIAL_STATE = {
  title: "",
  description: "",
  price: 0,
  category: "",
  tags: [],
  quantity: 0,
  comments: "",
};

const reducerFunction = (state, action) => {
  switch (action.type) {
    case "Change_Input":
      return {
        ...state,
        [action.payload.name]: action.payload.value,
      };
    case "Add_Tags":
      return {
        ...state,
        tags: [...state.tags, ...action.payload],
      };
    case "Increment":
      return {
        ...state,
        quantity: state.quantity + 1,
      };
    case "Decrement":
      return {
        ...state,
        quantity: state.quantity - 1,
      };
    case "Remove_Tag":
      return {
        ...state,
        tags: state.tags.filter((tag) => tag !== action.payload),
      };
    default:
      return state;
  }
};

const [state, dispatch] = useReducer(reducerFunction, INITIAL_STATE);

const OnHandleChange = (e) => {
  const { name, value } = e.target;
  dispatch({
    type: "Change_Input",
    payload: { name, value },
  });
};
```

========================================================================

### 03 useeffect()

    -useEffect() is a React Hook introduced in React 16.8 version.
    -useEffect() is a React hook used to handle side effects in functional components
    -It works like componentDidMount, componentDidUpdate, and componentWillUnmount combined.
    -It replaces lifecycle methods from class components, keeping the logic cleaner and more reusable.
    -It allows functional components to perform side effects, such as:
             1)Fetching data from APIs
             2)Setting up subscriptions or event listeners
             3)Interacting with the DOM
             4)Managing timers or intervals

## ✅ 1. `useEffect(() => { ... }, [])`

**Equivalent to:** `componentDidMount`
**Runs:** **Once** after the **initial render**

- Fetching data when the component loads
- Setting up a subscription
- Initializing a timer

```jsx
useEffect(() => {
  console.log("Component mounted");
  fetchData();
}, []);
```

Why only once?

- Because the **dependency array is empty**, React knows this effect doesn’t depend on any state or props.
- So it only runs **after the first render**, like `componentDidMount`.

## ✅ 2. `useEffect(() => { ... }, [dep])`

**Equivalent to:** `componentDidUpdate` (but for specific dependencies)

- After **initial render**
- Then **every time `dep` changes**

- Responding to changes in props or state
- Making API calls when a user selects something

```jsx
useEffect(() => {
  console.log("User ID changed:", userId);
  fetchUserDetails(userId);
}, [userId]);
```

### 🔄 Why controlled?

- React tracks `userId`, and only reruns the effect **when `userId` changes**.

---

## ✅ 3. `useEffect(() => { return () => { ... } }, [])`

**Equivalent to:** `componentWillUnmount`
**Runs:**

- The **cleanup function** runs when the component is about to unmount.

- Cleaning up event listeners
- Stopping intervals/timers
- Closing sockets or subscriptions

```jsx
useEffect(() => {
  const id = setInterval(() => console.log("Tick"), 1000);

  return () => {
    clearInterval(id); // Cleanup when unmounting
  };
}, []);
```

---

## ✅ 4. `useEffect(() => { ... })` (no dependency array)

- The effect will run after every render of the component.
- This includes the initial render as well as all subsequent re-renders caused by state or props changes.
- React will call the effect function every time the component updates.
- This behavior is similar to combining `componentDidMount` and `componentDidUpdate` from class components.
- In other words, whenever the component renders for any reason — whether due to state updates, prop changes, or parent re-renders — the code inside the effect will execute.

```jsx
useEffect(() => {
  console.log("Component rendered");
});
```

- This can cause **performance issues** if heavy logic is inside.
- Prefer using `[deps]` to control when it runs.

      The purpose of the useEffect hook is to allow you to perform side effects in a functional components.
      React useEffect hook is a function that gets executed for 3 different React component lifecycles.
      Those lifecycles are componentDidMount, componentDidUpdate, and componentWillUnmount lifecycles.

      Examples of side effects you will typically perform in a React application
      are: data fetching, and manually changing the DOM in React components.  setting up a subscription

      {/*
        useEffect(() => {
      // Mounting

      return () => {
          // Cleanup function
      }

  }, [Updating])

}

================================================================

### 04 React.memo

- `React.memo` is a higher-order component.
- It is used to optimize the performance of functional components by memoizing them.
- It is used to prevent unnecessary re-renders of functional components when their props have not changed.

- React compares the current props with the previous props.
- If the component receives the same props as the previous render, React skips re-rendering that component.
- If there’s no change, React reuses the previously rendered result.
- If props change, the component re-renders normally.
- This prevents unnecessary re-renders.

**Useful when:**

- Component is heavy (complex UI, large calculations).
- Props rarely change.
- Parent re-renders often, but child’s props remain the same.

- If you add a child component inside a parent component, and you are not passing any props to the child, then:

Without React.memo, the child will re-render whenever the parent re-renders.

- With React.memo, since there are no props, React will skip the child’s re-render when the parent re-renders.

What does memoizing mean?

Memoization is a technique where the result of a function call is cached (stored), so if the same inputs occur again, the cached result is returned immediately instead of recalculating.

========================================================================
### **useMemo**

- The **`useMemo`*- hook is used to **memoize the result of a calculation**.
- It **avoids recalculating a value on every render** unless its dependencies change.
- This helps **improve performance**, especially for expensive computations.


- **useMemo is used to memoize the result of a function or a computation.**
- It’s helpful when you have an **expensive calculation or data transformation*- that you want to avoid re-executing on every render if the inputs haven't changed.
- You pass a function to `useMemo`, and it returns the value that the function returns.
- If the dependencies in the dependency array change, the function is re-executed; otherwise, the cached value is returned.

const memoizedCallback = useCallback(() => {
  // Your callback logic here
}, [dependencies]);


### ✅ Common Use Cases:

* **– Avoiding expensive calculations**
  (e.g., math, parsing, or transformations that slow down rendering)

* **– Filtering or sorting large lists**
  (e.g., dynamic search or sorted product/user lists)

* **– Memoizing derived values from state or props**
  (e.g., booleans like `isActive`, totals, formatted text)

* **– Passing stable props to `React.memo` components**
  (to prevent unnecessary re-renders of children)

* **– Memoizing values for context providers**
  (to avoid re-renders when using `Context.Provider`)


### **useCallback**

* The **`useCallback`** hook is primarily used to **memoize functions**.
* **useCallback hook ensures that a function is not recreated on every render unless its dependencies change.**
* This can be beneficial when passing functions as props to child components, preventing unnecessary re-renders of those child components.

You pass a function and a dependency array to useCallback. The hook returns a memoized version of the function. If the dependencies change, the function is recreated; otherwise, the cached function is returned

Here are the **top use cases for `useCallback`** in simple dash format:

---
### ✅ **Common Use Cases of `useCallback`**

* **Memoizing event handlers** (e.g., click, submit functions) to avoid recreating on every render
* **Passing stable callback functions as props** to prevent unnecessary child component re-renders
* **Using functions inside `useEffect` dependencies** to avoid unwanted effect runs
* **Optimizing performance in large lists** where callbacks are passed to many items
* **Preventing inline function recreation in deeply nested components**




============================================================
#### useImperativeHandle()

    useImperativeHandle() customizes the instance value that is exposed to parent components when using ref. As always,
    imperative code using refs should be avoided in most cases.
    useImperativeHandle should be used with forwardRef.

    ### **`useImperativeHandle` in React**

#### **Definition**

`useImperativeHandle` is a React hook used with `forwardRef` to customize the values or methods exposed to a parent component when using a `ref`.

#### **Purpose**

- It allows child components to control what functionality or values are accessible via the `ref` from the parent.
- Instead of exposing the entire DOM or component instance, it exposes specific methods or properties.

#### **How It Works**

- By default, a `ref` attached to a child component gives access to the underlying DOM node or component instance.
- `useImperativeHandle` customizes this behavior by allowing you to expose selected methods or properties.

#### **Use Cases**

- To expose specific actions like focus, scroll, or reset methods to a parent.
- When a child manages multiple elements and the parent needs access to specific functionality.

#### **Key Points**

- Works **only with `forwardRef`** to pass the ref from parent to child.
- Prevents exposing unnecessary internal logic of the child.
- Useful for controlled interactions between components.

#### **When Not to Use**

- Avoid if the same functionality can be achieved with props or state.
- Use it sparingly to keep components declarative and maintainable.

  

  Custom Hooks:
  Custom Hooks are a mechanism to reuse stateful logic
  Custom hooks are nothing but these are javascript functions,
  if we have something common logic that we want to share between components
  then we use custom hooks.
  These are logic that will be reused in many components.
  We can create hooks using the name start with “use” keyword.

  {/_
  A custom Hook is basically a JavaScript function.
  Its name begins with "use" that could invoke other Hooks.
  The working of a custom Hook is identical to a regular function.
  The "use" in the starting describes that this particular function conforms to the rules of Hooks.
  Moreover, building custom Hooks enables you to extract component logic inside reusable functions.
  We create a different function and write a shared logic here. _/}

========================================================================
  What is useRef in React?
  The useRef is a hook that allows to directly create a reference to the DOM element in the functional component.
  Syntax: const refContainer = useRef(initialValue);
  The useRef returns a mutable ref object.
  Use useRef if you need to manage focus, text selection, trigger imperative animations or integrating third-party libraries.

========================================================================















    ---------------------- ### Additional Hooks:  ##------------------------------

    01 useHistory

    - The useHistory hook gives you access to the history instance that you may use to navigate.

    - Provides access to the history prop in React Router
    - Refers to the history package dependency that the router uses
    - A primary use case would be for programmatic routing with functions, like push,goback replace, etc.





    02 useLocation

    Provides access to the location prop in React Router

    It is similar to window.location in the browser itself, but this is accessible everywhere as it represents the * Router
    state and location.
    A primary use case for this would be to access the query params or the complete route string.

    03 useParams

    Provides access to search parameters in the URL
    This was possible earlier only using match.params.

    Route paramater;
    the route paramater is value passed one component to another component
    while nevigating

    useParams() hook access the  route paramater;


    04 useRouteMatch

    Provides access to the match object
    If it is provided with no arguments, it returns the closest match in the component or its parents.
    A primary use case would be to construct nested paths.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@===================@@@@@@@@@@@@@@@@@@@@@@@@@

## **React Hooks Overview**

Hooks are a feature introduced in React 16.8 that allow you to use state and other React features without writing a class. They typically start with the `use` keyword. Hooks are used within functional components and enable handling local component state, lifecycle features, and more.

### **Basic Hooks**

1. **useState**

   - **Purpose:** Maintains local state in a functional component.
   - **Syntax:**
     ```javascript
     const [state, setState] = React.useState(initialState);
     ```
   - **Example:**

     ```javascript
     import React, { useState } from "react";

     function Counter() {
       const [count, setCount] = useState(0);

       return (
         <div>
           <p>You clicked {count} times</p>
           <button onClick={() => setCount(count + 1)}>Click me</button>
         </div>
       );
     }
     ```

2. **useReducer**

   - **Purpose:** Manages complex state logic and dependencies on previous state.
   - **Syntax:**
     ```javascript
     const [state, dispatch] = useReducer(reducer, initialState);
     ```
   - **Example:**

     ```javascript
     import React, { useReducer } from "react";

     const INITIAL_STATE = { count: 0 };

     function reducer(state, action) {
       switch (action.type) {
         case "increment":
           return { count: state.count + 1 };
         case "decrement":
           return { count: state.count - 1 };
         default:
           throw new Error();
       }
     }

     function Counter() {
       const [state, dispatch] = useReducer(reducer, INITIAL_STATE);

       return (
         <div>
           <p>Count: {state.count}</p>
           <button onClick={() => dispatch({ type: "increment" })}>
             Increment
           </button>
           <button onClick={() => dispatch({ type: "decrement" })}>
             Decrement
           </button>
         </div>
       );
     }
     ```

3. **useContext**

   - **Purpose:** Allows sharing of values between components without passing props manually.
   - **Syntax:**
     ```javascript
     const Context = React.createContext(defaultValue);
     ```
   - **Example:**

     ```javascript
     import React, { createContext, useContext } from "react";

     const ThemeContext = createContext("light");

     function ThemedComponent() {
       const theme = useContext(ThemeContext);
       return <div>The current theme is {theme}</div>;
     }

     function App() {
       return (
         <ThemeContext.Provider value="dark">
           <ThemedComponent />
         </ThemeContext.Provider>
       );
     }
     ```

4. **useEffect**

   - **Purpose:** Handles side effects in functional components. It replaces lifecycle methods like `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`.
   - **Syntax:**
     ```javascript
     useEffect(() => {
       // Side effect logic here
       return () => {
         // Cleanup logic here
       };
     }, [dependencies]);
     ```
   - **Example:**

     ```javascript
     import React, { useState, useEffect } from "react";

     function Example() {
       const [count, setCount] = useState(0);

       useEffect(() => {
         document.title = `You clicked ${count} times`;

         return () => {
           document.title = "React App";
         };
       }, [count]);

       return (
         <div>
           <p>You clicked {count} times</p>
           <button onClick={() => setCount(count + 1)}>Click me</button>
         </div>
       );
     }
     ```

### **Additional Hooks**

1. **useCallback**

   - **Purpose:** Memoizes a callback function to prevent unnecessary re-renders.
   - **Syntax:**
     ```javascript
     const memoizedCallback = useCallback(() => {
       // Callback logic here
     }, [dependencies]);
     ```
   - **Example:**

     ```javascript
     import React, { useCallback, useState } from "react";

     function ChildComponent({ onClick }) {
       return <button onClick={onClick}>Click me</button>;
     }

     function ParentComponent() {
       const [count, setCount] = useState(0);

       const handleClick = useCallback(() => {
         setCount(count + 1);
       }, [count]);

       return (
         <div>
           <p>Count: {count}</p>
           <ChildComponent onClick={handleClick} />
         </div>
       );
     }
     ```

2. **useMemo**

   - **Purpose:** Memoizes a value to avoid expensive calculations on every render.
   - **Syntax:**
     ```javascript
     const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
     ```
   - **Example:**

     ```javascript
     import React, { useMemo, useState } from "react";

     function computeExpensiveValue(a, b) {
       // Expensive computation
       return a + b;
     }

     function Example() {
       const [a, setA] = useState(1);
       const [b, setB] = useState(2);

       const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

       return (
         <div>
           <p>Computed Value: {memoizedValue}</p>
           <button onClick={() => setA(a + 1)}>Increment A</button>
           <button onClick={() => setB(b + 1)}>Increment B</button>
         </div>
       );
     }
     ```

3. **useRef**

   - **Purpose:** Provides a way to access and manage DOM elements directly.
   - **Syntax:**
     ```javascript
     const ref = useRef(initialValue);
     ```
   - **Example:**

     ```javascript
     import React, { useRef } from "react";

     function FocusInput() {
       const inputRef = useRef(null);

       const focusInput = () => {
         inputRef.current.focus();
       };

       return (
         <div>
           <input ref={inputRef} type="text" />
           <button onClick={focusInput}>Focus Input</button>
         </div>
       );
     }
     ```

4. **useImperativeHandle**

   - **Purpose:** Customizes the instance value that is exposed to parent components when using `ref`.
   - **Syntax:**
     ```javascript
     useImperativeHandle(ref, () => ({
       // Custom instance values
     }));
     ```
   - **Example:**

     ```javascript
     import React, { useImperativeHandle, forwardRef, useRef } from "react";

     const CustomInput = forwardRef((props, ref) => {
       const inputRef = useRef(null);

       useImperativeHandle(ref, () => ({
         focus: () => {
           inputRef.current.focus();
         },
       }));

       return <input ref={inputRef} />;
     });

     function App() {
       const ref = useRef(null);

       const focusInput = () => {
         ref.current.focus();
       };

       return (
         <div>
           <CustomInput ref={ref} />
           <button onClick={focusInput}>Focus Input</button>
         </div>
       );
     }
     ```

### **React.memo**

- **Purpose:** Memoizes a component to prevent unnecessary re-renders if its props haven’t changed.
- **Syntax:**

  ```javascript
  const MemoizedComponent = React.memo(Component);
  ```

- **Example:**

  ```javascript
  import React from "react";

  function ExpensiveComponent({ data }) {
    // Expensive calculations
    return <div>{data}</div>;
  }

  export default React.memo(ExpensiveComponent);
  ```

### **Custom Hooks**

- **Purpose:** Allows sharing of stateful logic between components.
- **Syntax:**
  ```javascript
  function useCustomHook() {
    // Custom hook logic
  }
  ```
- **Example:**

  ```javascript
  import { useState, useEffect } from "react";

  function useWindowWidth() {
    const [windowWidth, setWindowWidth] = useState(window.innerWidth);

    useEffect(() => {
      const handleResize = () => setWindowWidth(window.innerWidth);

      window.addEventListener("resize", handleResize);

      return () => {
        window.removeEventListener("resize", handleResize);
      };
    }, []);

    return windowWidth;
  }

  function Component() {
    const windowWidth = useWindowWidth();

    return <div>Window width is {windowWidth}</div>;
  }
  ```

---

These examples provide a comprehensive overview of how to use various React Hooks effectively in your functional components.
