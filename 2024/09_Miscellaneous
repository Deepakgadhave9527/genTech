

A framework is a set of pre-written code that provides a structure for developing software applications. 

A library, on the other hand, is a collection of pre-written code that can be used to perform specific tasks.




==================================================================================

yes, you can use createRef() in a React functional component, but it's not recommended. It's better to use useRef() instead, as it is designed specifically for functional components and provides the same functionality
==================================================================================


(var x = 1; x < 5; x++) {
  setTimeout(() => {
    console.log(x);
  }, 1000);
}

 (let x = 1; x < 5; x++) {
  setTimeout(() => {
    console.log(x);
  }, 1);
}


### First Loop (Using var):

- *Scope*: var is function-scoped, meaning the variable x is shared across all iterations of the loop.
- *Closure*: The setTimeout callback captures this shared x. Since var does not create a new scope for each iteration, all callbacks reference the same x.
- *Event Loop*: The setTimeout function schedules the callback to run after 1000 milliseconds (1 second). By the time the event loop processes these callbacks, the loop has already finished, and x is 5.

*Output*: After 1000 milliseconds, all four callbacks run and log 5 four times.

### Second Loop (Using let):

- *Scope*: let is block-scoped, meaning each iteration of the loop has its own separate instance of x.
- *Closure*: The setTimeout callback captures the x from its specific iteration. Since let creates a new scope for each iteration, each callback references its own unique x.
- *Event Loop*: The setTimeout function schedules the callback to run after 1 millisecond. By the time the event loop processes these callbacks, each one has its own captured value of x from the iteration in which it was created.

*Output*: After 1 millisecond, the callbacks run and log 1, 2, 3, and 4 respectively.

==================================================================================

Event delegation

Event delegation in JavaScript is a technique where you attach a single event listener to a parent element, rather than to multiple child elements individually.
This approach leverages event bubbling in the DOM, where an event occurring on a nested element will bubble up through its ancestors.

Here's how event delegation works:

1. **Attach Listener to Parent Element**: Instead of attaching event listeners to each child element, you attach a single event listener to the parent element that contains all the child elements you are interested in.

2. **Use Event Bubbling**: When an event happens (like a click) on a child element, the event bubbles up through its ancestors in the DOM hierarchy.

3. **Check the Target Element**: In the event handler function attached to the parent element, you can check the `event.target` property to determine which specific child element triggered the event. This allows you to conditionally execute different actions based on which child element was clicked.

### Example:

Suppose you have a list of items in an unordered list (`<ul>`) and you want to handle click events on each list item (`<li>`).

<ul id="parentList">
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
</ul>

In JavaScript, you can delegate the click event handling to the parent `<ul>` element:

```javascript
const parentList = document.getElementById('parentList');

parentList.addEventListener('click', function(event) {
    if (event.target.tagName === 'LI') {
        console.log('Clicked on:', event.target.textContent);
        // Perform actions based on the clicked list item
    }
});

In this example:

- The `click` event listener is added to the `parentList`.
- When a `<li>` element is clicked, the event bubbles up to the `parentList`.
- Inside the event handler, `event.target` refers to the actual element that triggered the event (in this case, the `<li>`).
- You can then perform actions based on the specific `<li>` element that was clicked.

==================================================================================
classList

with help of classList JavaScript allows us to add, remove, replace, toggle or check whether the specified CSS classs is present or not


add()	Adds one or more tokens to the list
contains()	Returns true if the list contains a classs
remove()	Removes one or more tokens from the list
toggle()	Toggles between tokens in the list
replace()	Replaces a token in the list

==================================================================================

1. What is the DOM?
The DOM is the Document Object Model, which is a tree-like structure that represents the HTML document. 
It is used by JavaScript to access and manipulate the document.

==================================================================================
An event listener in JavaScript is a function that waits for a specific event to occur on an element and then executes a specified action. Events can be user actions like clicks, key presses, mouse movements, or system-generated events like page load.

Use addEventListener() to attach an event listener to an element.
Use removeEventListener() to detach an event listener.
