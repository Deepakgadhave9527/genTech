

==========================================

Single Page Applications (SPAs), which build pages in our browser using JavaScript,
 MPAs depend on the server to generate and refresh pages

### Multi-Page Application (MPA)

-If an application / website has multiple requestable web pages then that application
 is called multi page application.

-An MPA consists of multiple pages, each with its own URL. 

-When a user navigates to a new page,the browser reloads and fetches the new HTML content from the server.

-It recreates the DOM for each request


-Multipage application is slow because each request will be send to the server then server
 will return a web page as response.

-It utilizes the server resources so high configuration server is required.

-It utilizes more bandwidth

-To fetch the different content you need to fetch different webpages from the server


B] Single page application


Single-Page Application
A single-page application is an app that works inside a browser and does not require page reloading during use.
An SPA loads a single HTML page and dynamically updates the content as the user interacts with the app, without refreshing the entire page.


-If an application has single requestable web page then that application is called
single page application.

-In SPA all the content will get loaded in the web browser on first request, after that
all the request will be served from web browser itself.

-it does not utilizes the server resources for each request because the content will
be serverd from web browser.

-less bandwidth is required

-it is slow for first request and fast from second request

-It does not re create the DOM tree for content change



==========================================

### What is React.js?

- JavaScript library for building fast, interactive user interfaces for web and mobile apps.
- Creates reusable UI components.
- Enables large web applications to update data without reloading the page.
- Supports creation of Single Page Applications (SPA).
- Focuses on developing User Interfaces (UI) to improve app speed.
- Utilizes a virtual DOM to enhance performance.
- Virtual DOM is faster than the regular DOM.
- Usable on both client and server-side, and with other frameworks.
- Created by Jordan Walke, a software engineer at Facebook.



ReactJS is an open-source JavaScript library used for building user interfaces, particularly single-page applications
- Developed and maintained by Facebook,  
- React allows developers to create large web applications that can update and render efficiently in response to changing data.


1. **Component-Based Architecture:**
   - React applications are built using components, which are reusable pieces of UI. 
    -Each component has its own logic and rendering, making code modular and easier to manage.

2. **Virtual DOM:**
   - React uses a virtual DOM to improve performance. 
   - When a component’s state changes, React updates the virtual DOM, compares it with the previous version, and only updates the actual DOM with the changes.

3. **JSX Syntax:**
   - JSX (JavaScript XML) is a syntax extension that allows writing HTML-like code within JavaScript. 
   - This makes the code more readable and easier to write.

4. **Unidirectional Data Flow:**
   - data flows in one direction from parent to child components. 

5. **State Management:**
   - React has a built-in state management system for managing data within components.
   - For more complex state management across the application, libraries like Redux or Context API are often used.

6. **Lifecycle Methods:**
   - React provides lifecycle methods that allow developers to hook into specific moments in a component’s life (e.g., mounting, updating, unmounting) to perform actions or manage state.

<!-- 
1. **Efficiency:**
   - The virtual DOM and optimized rendering improve performance and efficiency.

2. **Reusability:**
   - Component-based architecture encourages code reuse, which can reduce development time and improve maintainability.

3. **Community and Ecosystem:**
   - React has a large and active community, providing a wealth of resources, libraries, and tools.

4. **Flexibility:**
   - React can be used for web, mobile (with React Native), and even desktop applications, making it a versatile choice for developers. -->

==========================================

What is JavaScript?

- JavaScript is a single-threaded, prototype-based programming language primarily used for web development.
- It can execute code on both the client-side (in web browsers) and server-side (with platforms like Node.js).
- JavaScript allows you to update and change HTML and CSS.

- It can calculate, manipulate, and validate data.
- You can use it to add dynamic behavior, store information, and handle requests and responses on a website.
- It allows asynchronous operations with promises and async/await.

JavaScript allows you to update and change HTML and CSS through the Document Object Model (DOM).

- JavaScript has a rich ecosystem of libraries and frameworks like React, Angular, and Vue.js.
- JavaScript is used in many non-browser environments.
- JavaScript supports event-driven programming.


==========================================
------------------------------------------------------------------------------------------------
server side rendering (SSR) and client side rendering (CSR).



In the world of web development, 
there are two main methods for rendering web pages:
server side rendering (SSR) and client side rendering (CSR).

What is Server Side Rendering (SSR)?

-Server Side Rendering is the traditional way of rendering web pages.
-When a user requests a page from the server, the server processes the 
request and generates the complete HTML file, 
which is send to browser
-The browser receives the complete HTML file and displays it to the user.
SSR: Better performance, Faster initial load, better SEO, and security.


What is Client Side Rendering (CSR)?
Client Side Rendering is a more modern approach to rendering web pages.
In this method, the server sends only the necessary data and JavaScript files to the browser. 
Browser generates HTML with JavaScript.
Allows dynamic content and improved user experience.


Differences:

SSR: Better performance, Faster initial load, better SEO, and security.
CSR: More dynamic, better user experience, and reduces server load.





------------------------------------------------------------------------------------------------
Authentication and authorization are two essential concepts in web development, 
 used together to manage access control and secure resources.
 Heres a brief overview of each:

1. Authentication:
   - Authentication is the process of verifying the identity of a user, 
   typically through credentials such as username and password.
   - Common authentication mechanisms include:
     - Form-based authentication: Users provide credentials via a login form.
     - Token-based authentication: Users receive a token after successful login, which is then used to authenticate subsequent requests.
     - OAuth/OpenID Connect: Third-party authentication protocols used for single sign-on (SSO) and social login.
    where user credentials are verified against a database or external identity provider.
   - The goal of authentication is to ensure that users are who they claim to be before granting access to protected resources or features.
   - Authentication is often implemented at the application level,

2. Authorization:
   - Authorization is the process of determining whether a user 
   has the necessary permissions to access a resource or perform a specific action.
   - Once a user is authenticated, authorization rules are applied to determine what they can and cannot do within the application.
   - Authorization can be based on various factors, including user roles, groups, attributes, or custom policies.
   - Common authorization mechanisms include:
     - Role-based access control (RBAC): Users are assigned roles (e.g., admin, editor, viewer) with corresponding permissions.
     - Attribute-based access control (ABAC): Access decisions are based on user attributes, resource properties, and environmental conditions.
   - Authorization is typically enforced at the application level, with access control rules defined and enforced within the application logic or middleware.
   

In summary, authentication verifies user identity, while authorization controls user access to resources based on their identity and permissions. Together, these concepts form the foundation of access control and security in web applications.



